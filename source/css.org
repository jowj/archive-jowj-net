#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+TITLE: css test
#+AUTHOR: josiah
* this is the first header
this is a normal paragraph, and it contains a line that wraps naturally due to length. its pretty cool. below me is a list:
#+ATTR_LATEX: :options [noitemsep]
1. item 1
2. item 2
3. item 3
   - unordered 1
   - 2
   - 3

* below is a picture embed with caption
#+CAPTION: Make sure you use the "Bot User OAuth Access Token" in a "Classic Slack App"; anything else won't work.
#+NAME:   fig:pagedout-slack_example.png
[[~/Pictures/pagedout_slack_example.png]]

* here is a python embd

#+BEGIN_SRC python
import slack

def reactable_string(text):
    reactable_array = []
    t = text.lower()
    if 'cyber' in t:
        reactable_array.append('robot')
    if 'flavor town' in t:
        reactable_array.append('flavortown')
    return reactable_array

def rtm(emoji, payload, id, ts):
    payload['web_client'].reactions_add(
        channel=id,
        name=emoji,
        timestamp=ts
    )

    return None


@slack.RTMClient.run_on(event='message')
def handle_messages(**payload):
    data = payload['data']
    id = data['channel']
    ts = data['ts']

    if reactable_string(data['text']):
        needed = reactable_string(data['text'])

        if 'robot' in reactions_needed:
            rtm("robot_face", payload, id, ts)
        if 'flavortown' in reactions_needed:
            rtm("dark_sunglasses", payload, id, ts)
            rtm("guyfieri", payload, id, ts)


if __name__ == '__main__':
    stoken = 'XXXXXXXXXXXXXXXX'  # Secret token!!
    rtm_client = slack.RTMClient(token=stoken)
    rtm_client.start()
#+END_SRC

* here is a listp embed

#+BEGIN_SRC elisp
(let ((proj-base (file-name-directory load-file-name)))
  (setq org-publish-project-alist
        `(("project-name"
           :base-directory ,(concat proj-base ".")
           :recursive t
           :publishing-directory ,(concat proj-base  "../export")
           :publishing-function org-html-publish-to-html))))
#+END_SRC
* see links styling
   https://me.jowj.net looks like this

* here are some tooltips
#+begin_parallel
[[color:orange][Are you excited to learn some Lisp?]] [[blue:Yes!]]

Pop-quiz: How does doc:apply work?
#+end_parallel

#+begin_details Answer
link-here:solution
Syntactically, ~(apply f '(x0 ... xN)) = (f x0 ... xN)~.

[[remark:Musa][Ain't that cool?]]

#+begin_spoiler aqua
That is, [[color:magenta][we can ((apply)) a function to a list of arguments!]]
#+end_spoiler

#+end_details

#+html: <br>
#+begin_box
octoicon:report Note that kbd:C-x_C-e evaluates a Lisp form!
#+end_box
[[margin:][hello]]
/Allah [[margin:][The God of Abraham; known as Elohim in the Bible]] does
not burden a soul beyond what it can bear./ --- Quran 2:286

#+LATEX_HEADER: \usepackage{multicol}
#+LATEX_HEADER: \usepackage{tcolorbox}
#+latex: In the LaTeX output, we have a glossary.

show:GLOSSARY

badge:Thanks|for_reading
tweet:https://github.com/alhassy/org-special-block-extras
badge:|buy_me_a coffee|gray|https://www.buymeacoffee.com/alhassy|buy-me-a-coffee
