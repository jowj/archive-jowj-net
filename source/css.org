#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+TITLE: css test
#+AUTHOR: josiah
* this is the first header
this is a normal paragraph, and it contains a line that wraps naturally due to length. its pretty cool. below me is a list:
#+ATTR_LATEX: :options [noitemsep]
1. item 1
2. item 2
3. item 3
   - unordered 1
   - 2
   - 3

* below is a picture embed with caption
#+CAPTION: i should have used a better camera for this
#+NAME:   fig:shitty-headshot.png
[[~/Pictures/screenshots/bad-headshot.png]]

* here is a python embd

#+BEGIN_SRC python
import slack

def reactable_string(text):
    reactable_array = []
    t = text.lower()
    if 'cyber' in t:
        reactable_array.append('robot')
    if 'flavor town' in t:
        reactable_array.append('flavortown')
    return reactable_array

def rtm(emoji, payload, id, ts):
    payload['web_client'].reactions_add(
        channel=id,
        name=emoji,
        timestamp=ts
    )

    return None


@slack.RTMClient.run_on(event='message')
def handle_messages(**payload):
    data = payload['data']
    id = data['channel']
    ts = data['ts']

    if reactable_string(data['text']):
        needed = reactable_string(data['text'])

        if 'robot' in reactions_needed:
            rtm("robot_face", payload, id, ts)
        if 'flavortown' in reactions_needed:
            rtm("dark_sunglasses", payload, id, ts)
            rtm("guyfieri", payload, id, ts)


if __name__ == '__main__':
    stoken = 'XXXXXXXXXXXXXXXX'  # Secret token!!
    rtm_client = slack.RTMClient(token=stoken)
    rtm_client.start()
#+END_SRC

* here is a lisp embed

#+BEGIN_SRC elisp
(let ((proj-base (file-name-directory load-file-name)))
  (setq org-publish-project-alist
        `(("project-name"
           :base-directory ,(concat proj-base ".")
           :recursive t
           :publishing-directory ,(concat proj-base  "../export")
           :publishing-function org-html-publish-to-html))))
#+END_SRC
* see links styling
   https://me.jowj.net looks like this
   https://google.com looks like this

* here are some weird org mode extras i'm playing with

** using ~#+begin_parallel~ to force side by side
#+begin_parallel
Here's some text I want to look pretty normal

Text in parallel!! [[color:purple][cool]]. 
#+end_parallel

** using ~doc:anything~ to do tt on hover
   Pop-quiz: How does doc:apply work?

** creating sections for visual break ups of text
I still have to figure out colors, obviously.
#+begin_details Answer
link-here:solution
Syntactically, ~(apply f '(x0 ... xN)) = (f x0 ... xN)~.
#+end_details
** adding personal remarks:
This seems kinda interesting, but mostly a novelty. No one else is gonna read my shit and also comment in org mode hah. For people who actually live in breathe latex though, this is probably rad:

[[remark:From the editor:][Ain't that cool?]]

** using spoilers
#+begin_spoiler aqua
Remember, 3 is weird, but 2 makes a ((spoiler lol))
#+end_spoiler


** detail box!
again, some colors to fix
#+html: <br>
#+begin_box
octoicon:report Note that kbd:C-x_C-e evaluates a Lisp form!
#+end_box

** latex margin vs html tooltips!
damn i think this[[margin:][from org mode, we write "margin:" and it will export to latex as a margin note, or to html as a tooltip! fucking cool.]] is cool.

#+LATEX_HEADER: \usepackage{multicol}
#+LATEX_HEADER: \usepackage{tcolorbox}
#+latex: In the LaTeX output, we have a glossary.

show:GLOSSARY
