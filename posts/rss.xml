<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title>josiahs blog</title>
<description>projects/writing bullshit in rss.</description>
<generator>Emacs webfeeder.el</generator>
<link>https://me.jowj.net/posts/</link>
<atom:link href="https://me.jowj.net/posts/rss.xml" rel="self" type="application/rss+xml"/>
<lastBuildDate>Fri, 12 Feb 2021 16:25:48 -0600</lastBuildDate>
<item>
  <title>css test</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-orgbc18f97" class="outline-2">
 <h2 id="orgbc18f97">this is the first header</h2>
 <div class="outline-text-2" id="text-orgbc18f97">
 <p>
this is a normal paragraph, and it contains a line that wraps naturally due to length. its pretty cool. below me is a list:
</p>
 <ol class="org-ol"> <li>item 1</li>
 <li>item 2</li>
 <li>item 3
 <ul class="org-ul"> <li>unordered 1</li>
 <li>2</li>
 <li>3</li>
</ul></li>
</ol></div>
</div>

 <div id="outline-container-org9a099a9" class="outline-2">
 <h2 id="org9a099a9">below is a picture embed with caption</h2>
 <div class="outline-text-2" id="text-org9a099a9">

 <figure id="org8d7c96a"> <img src="file:///home/josiah/Pictures/pagedout_slack_example.png" alt="pagedout_slack_example.png"></img> <figcaption> <span class="figure-number">Figure 1: </span>Make sure you use the "Bot User OAuth Access Token" in a "Classic Slack App"; anything else won't work.</figcaption></figure></div>
</div>

 <div id="outline-container-org9f3ddaf" class="outline-2">
 <h2 id="org9f3ddaf">here is a python embd</h2>
 <div class="outline-text-2" id="text-org9f3ddaf">
 <div class="org-src-container">
 <pre class="src src-python"> <span style="color: #598249;">import</span> slack

 <span style="color: #598249;">def</span>  <span style="color: #2F7BDE;">reactable_string</span>(text):
     <span style="color: #2F7BDE;">reactable_array</span> = []
     <span style="color: #2F7BDE;">t</span> = text.lower()
     <span style="color: #598249;">if</span>  <span style="color: #15968D;">'cyber'</span>  <span style="color: #598249;">in</span> t:
        reactable_array.append( <span style="color: #15968D;">'robot'</span>)
     <span style="color: #598249;">if</span>  <span style="color: #15968D;">'flavor town'</span>  <span style="color: #598249;">in</span> t:
        reactable_array.append( <span style="color: #15968D;">'flavortown'</span>)
     <span style="color: #598249;">return</span> reactable_array

 <span style="color: #598249;">def</span>  <span style="color: #2F7BDE;">rtm</span>(emoji, payload,  <span style="color: #598249;">id</span>, ts):
    payload[ <span style="color: #15968D;">'web_client'</span>].reactions_add(
        channel= <span style="color: #598249;">id</span>,
        name=emoji,
        timestamp=ts
    )

     <span style="color: #598249;">return</span>  <span style="color: #15968D;">None</span>


 <span style="color: #598249;">@slack.RTMClient.run_on</span>(event= <span style="color: #15968D;">'message'</span>)
 <span style="color: #598249;">def</span>  <span style="color: #2F7BDE;">handle_messages</span>(**payload):
     <span style="color: #2F7BDE;">data</span> = payload[ <span style="color: #15968D;">'data'</span>]
     <span style="color: #598249;">id</span> = data[ <span style="color: #15968D;">'channel'</span>]
     <span style="color: #2F7BDE;">ts</span> = data[ <span style="color: #15968D;">'ts'</span>]

     <span style="color: #598249;">if</span> reactable_string(data[ <span style="color: #15968D;">'text'</span>]):
         <span style="color: #2F7BDE;">needed</span> = reactable_string(data[ <span style="color: #15968D;">'text'</span>])

         <span style="color: #598249;">if</span>  <span style="color: #15968D;">'robot'</span>  <span style="color: #598249;">in</span> reactions_needed:
            rtm( <span style="color: #15968D;">"robot_face"</span>, payload,  <span style="color: #598249;">id</span>, ts)
         <span style="color: #598249;">if</span>  <span style="color: #15968D;">'flavortown'</span>  <span style="color: #598249;">in</span> reactions_needed:
            rtm( <span style="color: #15968D;">"dark_sunglasses"</span>, payload,  <span style="color: #598249;">id</span>, ts)
            rtm( <span style="color: #15968D;">"guyfieri"</span>, payload,  <span style="color: #598249;">id</span>, ts)


 <span style="color: #598249;">if</span>  <span style="color: #598249;">__name__</span> ==  <span style="color: #15968D;">'__main__'</span>:
     <span style="color: #2F7BDE;">stoken</span> =  <span style="color: #15968D;">'XXXXXXXXXXXXXXXX'</span>   <span style="color: #5e6263;"># </span> <span style="color: #5e6263;">Secret token!!</span>
     <span style="color: #2F7BDE;">rtm_client</span> = slack.RTMClient(token=stoken)
    rtm_client.start()
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgaf268a1" class="outline-2">
 <h2 id="orgaf268a1">here is a listp embed</h2>
 <div class="outline-text-2" id="text-orgaf268a1">
 <div class="org-src-container">
 <pre class="src src-elisp">( <span style="color: #598249;">let</span> ((proj-base (file-name-directory load-file-name)))
  ( <span style="color: #598249;">setq</span> org-publish-project-alist
        `(( <span style="color: #15968D;">"project-name"</span>
            <span style="color: #598249;">:base-directory</span> ,(concat proj-base  <span style="color: #15968D;">"."</span>)
            <span style="color: #598249;">:recursive</span> t
            <span style="color: #598249;">:publishing-directory</span> ,(concat proj-base   <span style="color: #15968D;">"../export"</span>)
            <span style="color: #598249;">:publishing-function</span> org-html-publish-to-html))))
</pre>
</div>
</div>
</div>
 <div id="outline-container-org9b934cb" class="outline-2">
 <h2 id="org9b934cb">see links styling</h2>
 <div class="outline-text-2" id="text-org9b934cb">
 <p>
 <a href="https://me.jowj.net">https://me.jowj.net</a> looks like this
</p>
</div>
</div>

 <div id="outline-container-orgc945a48" class="outline-2">
 <h2 id="orgc945a48">here are some tooltips</h2>
 <div class="outline-text-2" id="text-orgc945a48">
 <div style="column-rule-style: none;column-count: 2;">
 <p>
 <span style="color:orange;">Are you excited to learn some Lisp?</span>  <span style="color:blue;">Yes!</span>
</p>

 <p>
Pop-quiz: How does  <abbr class="tooltip" title="Call FUNCTION with our remaining args, using our last arg as list of args.<br>Then return the value FUNCTION returns.<br>Thus, (apply '+ 1 2 '(3 4)) returns 10.<br><br>(fn FUNCTION &rest ARGUMENTS)">apply</abbr> work?
</p>

</div>

 <details class="code-details" style="padding: 1em;
                          background-color: #e5f5e5;
                          /* background-color: pink; */
                          border-radius: 15px;
                          color: hsl(157 75%);
                          font-size: 0.9em;
                          box-shadow: 0.05em 0.1em 5px 0.01em  #00000057;"> <summary> <strong>
                       <font face="Courier" size="3" color="green">
                         Answer
                      </font>
                    </strong>
                  </summary> <p>
 <a class="anchor" aria-hidden="true" id="solution" href="#solution"> <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 16
   16" width="16" height="16"> <path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69
   3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10
   5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0
   2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5
   0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55
   13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>
Syntactically,  <code>(apply f '(x0 ... xN)) = (f x0 ... xN)</code>.
</p>

 <p>
</p> <p style="color: black;"> <span style="border-width:1px;border-style:solid;padding:5px"> <strong>[Musa:</strong></span> Ain't that cool?   <span style="border-width:1px;border-style:solid;padding:5px"> <strong>]</strong></span></p>


 <style> #g0 {color: aqua; background-color:aqua;}
       #g0:hover {color: black; background-color:white;} </style> <p>
That is,  <span style="color:magenta;">we can  <span id="g0"> apply </span> a function to a list of arguments!</span>
</p>





</details> <br></br> <div style="padding: 1em; background-color: #CCFFCC;border-radius: 15px; font-size: 0.9em; box-shadow: 0.05em 0.1em 5px 0.01em #00000057;"> <h3></h3>
 <p>
 <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 16 16" width="16" height="16"> <path fill-rule="evenodd" d="M0 2a1 1 0 011-1h14a1 1 0 011 1v9a1 1 0 01-1 1H7l-4 4v-4H1a1 1 0 01-1-1V2zm1 0h14v9H6.5L4 13.5V11H1V2zm6 6h2v2H7V8zm0-5h2v4H7V3z"></path></svg> Note that  <kbd> C-x C-e </kbd> evaluates a Lisp form!
</p>

</div>
 <p>
 <abbr class="tooltip" title="hello">°</abbr>&emsp13;
/Allah  <abbr class="tooltip" title="The God of Abraham; known as Elohim in the Bible] does<br>">°</abbr>&emsp13;this is a test of a margin/tooltip <abbr class="tooltip" title="from org mode, we write ''margin:'' and it will export to latex as a margin note, or to html as a tooltip! fucking cool.">°</abbr>&emsp13; note.
</p>

 <p>

</p>

 <p>
 <img src="https://img.shields.io/badge/Thanks-for_reading-nil?logo=nil"></img> <a href="https://twitter.com/intent/tweet?text=This looks super neat (•̀ᴗ•́)و::&url=https://github.com/alhassy/org-special-block-extras"> <img src="https://img.shields.io/twitter/url?url=https://github.com/alhassy/org-special-block-extras"></img></a>
 <img src="https://img.shields.io/badge/-buy_me_a-nil?logo=nil"></img> coffee|gray| <a href="https://www.buymeacoffee.com/alhassy%7Cbuy-me-a-coffee">https://www.buymeacoffee.com/alhassy%7Cbuy-me-a-coffee</a>
</p>
</div>
</div>
</div>]]></description>
  <link>https://me.jowj.net/posts/css.html</link>
  <guid isPermaLink="false">https://me.jowj.net/posts/css.html</guid>
  <pubDate>Fri, 12 Feb 2021 16:25:00 -0600</pubDate>
</item>
<item>
  <title>using matrix</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-orgd1d203d" class="outline-2">
 <h2 id="orgd1d203d">introduction</h2>
 <div class="outline-text-2" id="text-orgd1d203d">
 <p>
i wanna write about  <a href="https://matrix.org">matrix</a>. matrix is a 'new' protocol for decentralized communication. it can be used in a bunch of different ways: from relatively secure, favoring security over ease of use, to very open, favoring ease of use over all other concerns. i tend to use it in the, to me, bare minimum secure configuration and then focusing hard on ease of use.
</p>

 <ul class="org-ul"> <li>i use e2ee by default</li>
 <li>i self host my home server</li>
 <li>i allow federation</li>
</ul> <p>
i like that i can expect message  <i>content</i> privacy and also retain relative ease of use within the same platform. i like that that i can bridge a bunch of services to a single chat client (albeit with some uh, effort / UX trade-offs). i like that there exists reference apps for basically every platform i care about (and basically all the platforms my friends care about).
</p>

 <p>
i really like matrix! but its fair to say there are also problems with it. if you're familiar with matrix at all you  <a href="https://matrix.org/blog/2019/04/11/we-have-discovered-and-addressed-a-security-breach-updated-2019-04-12">probably heard about their big security fuck up</a>. earlier, i wrote specifically that you can expect message  <i>content</i> privacy, and i'll add here that you cannot expect message  <i>metadata</i> privacy (for example, read the  <a href="https://news.ycombinator.com/item?id=23108750">first half of tptacek's reply on HN about contact lists in matrix vs signal</a>). if you self host, there's an even bigger metadata leak than for users who use a larger existing deployment.
</p>

 <p>
i don't wanna convince you that matrix is the protocol of your dreams and you should use it. i just wanna talk about what i'm using it for and maybe help a few folks who ran into some of the same issues i've now solved.
</p>
</div>
</div>

 <div id="outline-container-orgd355b3b" class="outline-2">
 <h2 id="orgd355b3b">what am i doing with matrix</h2>
 <div class="outline-text-2" id="text-orgd355b3b">
 <p>
one of the most fun / worst things about using matrix is that there's a bajillion knobs to tweak; anyone who is using it could have anywhere from 1 to n things different from my setup. here's what i'm doing:
</p>
</div>

 <div id="outline-container-orgbb87b0f" class="outline-3">
 <h3 id="orgbb87b0f">clients</h3>
 <div class="outline-text-3" id="text-orgbb87b0f">
 <p>
i'm using standard element clients for linux, macOS, iOS, and android.
</p>

 <p>
i'm paying attention to ditto and nio as mobile clients; ditto is made by someone from my city which is rad! its purple, which is rad! nio is  <i>also</i> purple, so its also rad. i've played with the weechat-matrix plugin which i think fucking sucks. i've played with mirage, nheko, and a few others that just seemed incomplete. i'm hopeful that the KDE folks get a reasonably good client going with  <a href="https://blogs.kde.org/2017/09/05/konversation-2x-2018-new-user-interface-matrix-support-mobile-version">konversations2</a>, but man the last meaningful update i've seen is ages old.
</p>

 <p>
since originally writing ^ that paragraph, the new hotness for KDE clients is  <a href="https://github.com/KDE/neochat">neochat</a>; I've only cursorily looked at this but it seems like is heading the right direction. Additionally, Nheko has received a bunch of updates and its one of the desktop linux clients i'll be trying out next. I've also tried the  <a href="https://github.com/matrix-org/purple-matrix">libpurple plugin</a> which is, like, fine I guess. its libpurple. Its not feature complete and it has all the drawbacks of libpurple. I wouldn't use it.
</p>
</div>
</div>


 <div id="outline-container-orgd1ca908" class="outline-3">
 <h3 id="orgd1ca908">servers</h3>
 <div class="outline-text-3" id="text-orgd1ca908">
 <p>
i'm using the  <a href="https://github.com/matrix-org/synapse">synapse reference server</a>, written in python. there really aren't other options here at the moment. dendrite (written in go) looks like it will no longer be the successor to Synapse, and instead just be a testing ground. there are a few rust servers being worked on as well, but with less official support.
</p>
</div>
</div>

 <div id="outline-container-orgb2d4919" class="outline-3">
 <h3 id="orgb2d4919">bridges</h3>
 <div class="outline-text-3" id="text-orgb2d4919">
</div>
 <div id="outline-container-orga90b482" class="outline-4">
 <h4 id="orga90b482">slack</h4>
 <div class="outline-text-4" id="text-orga90b482">
 <p>
i'm currently using the  <a href="https://github.com/matrix-org/matrix-appservice-slack">matrix-appservice-slack bridge</a> to bridge my local family and friends slack to my matrix server. this lets me do two things that are important to me:
</p>

 <ul class="org-ul"> <li>pull in all messages in my public channels to my element instance, which lets me capture logs (slack requires that you pay a non-trivial amount of money per user per month if you want to have access to historic data)</li>
 <li>talk to my friends in slack from my element client.</li>
</ul> <p>
the second one makes me feel like i'm 12, using trillian and setting away messages in aim. i love it.
</p>

 <p>
all the data replicates without hiccups between my synapse instance and the slack api, but the presentation of threaded messages in the element clients sucks, frankly. there's  <a href="https://github.com/vector-im/riot-web/issues/2349">a bug</a> filed for it but what the final implementation will look like is anyone's guess.
</p>
</div>
</div>

 <div id="outline-container-orgcaa0fd4" class="outline-4">
 <h4 id="orgcaa0fd4">irc</h4>
 <div class="outline-text-4" id="text-orgcaa0fd4">
 <p>
the self hosted  <a href="https://github.com/matrix-org/matrix-appservice-irc">matrix-appservice-irc bridge</a> is what most people seem to use. i have used the  <i>hosted</i> version on matrix.org before; i hated it. it was great to be able to talk to folks on freenode channels from element, especially given that there is no reasonable irc client on iOS! but the UX is just bad.
</p>

 <p>
i've started the learning process for self hosting it myself and having the bridge treat my existing IRC bouncer as a separate IRC network but that's pretty undocumented. there are no quick and dirty guides about it, and especially since i'm isolating at home all the time now, my drive to solve this iOS irc client problem has cratered. i  <i>have</i> verified with the bridge maintainer that what i want to do is possible; its just relatively niche and hasn't been written about.
</p>
</div>
</div>

 <div id="outline-container-org7f847c8" class="outline-4">
 <h4 id="org7f847c8">discord</h4>
 <div class="outline-text-4" id="text-org7f847c8">
 <p>
i'm using the  <a href="https://github.com/matrix-discord/mx-puppet-discord">mx-puppet-discord</a> bridge for bridging in discord channels. I tried using the  <a href="https://github.com/Half-Shot/matrix-appservice-discord">appservice discord</a> bridge but had a  <i>devil</i> of a time getting it to work. mx-puppet-discord works and has (imo) a better user experience for admins, though it does seem pretty finnicky. from what I can tell, more finnicky than the appservice. at least this one i can get to run though!!
</p>
</div>
</div>

 <div id="outline-container-org4290f18" class="outline-4">
 <h4 id="org4290f18">combining bridges in a single room</h4>
 <div class="outline-text-4" id="text-org4290f18">
 <p>
a thing that i think is fucking  <i>cool</i> and also probably a source of some of my problems is: i currently use some of these bridges to create a frankenstein room, that does bidirecitonal send like discord <-> matrix <-> slack; the channel "mothra-fuckers" (shut up) in discord talks to the channel "mothra-fuckers" in  matrix, which is also bridged to "mothra-fuckers" in slack, and anyone in any of those channels can talk to all three platforms! rad!
</p>
</div>
</div>
</div>
</div>

 <div id="outline-container-org3887808" class="outline-2">
 <h2 id="org3887808">avoiding common pitfalls of self hosting</h2>
 <div class="outline-text-2" id="text-org3887808">
</div>
 <div id="outline-container-org9b16adb" class="outline-3">
 <h3 id="org9b16adb">deployment</h3>
 <div class="outline-text-3" id="text-org9b16adb">
 <p>
I think the first thing you should do is eschew configuring synapse and all these bridges on your own. that fucking sucks. use  <a href="https://github.com/spantaleev/matrix-docker-ansible-deploy">this set</a> of ansible roles, these guys are great, continuously update stuff, and provide meaningful changelogs for updates. their documentation is not always lovely, especially about the optional plugins they offer, but have been enough to get me started on solving the problem every time so far.
</p>

 <p>
I forked their repo and periodically update it from  <code>upstream/master</code> to pull in latest changes when I have time to commit to problem solving any issues. Mostly I don't have problems, but occasionally there are big version updates that have done things like enforce migrations from sqlite to pgsql, or enforced breaking changes with TLS, etc. 
</p>
</div>
</div>

 <div id="outline-container-orgf5a2b73" class="outline-3">
 <h3 id="orgf5a2b73">disk space</h3>
 <div class="outline-text-3" id="text-orgf5a2b73">
 <p>
one of the things i keep intending to do (and have thus far put off) is move away from relying on raw disks attached to DO droplet and move towards object storage with s3/do spaces/ whatever. This is made easy if you use the previously mentioned set of ansible roles. if you don't do this, you will have to periodically go in and delete old media or add a bunch of new disk space.
</p>

 <p>
if you really must go with disks and not object storage for some reason I recommend that you use external, non OS drives for very Obvious linux admin reasons. Much easier to snapshot / do backups on that sort of thing.
</p>
</div>
</div>

 <div id="outline-container-org915de9a" class="outline-3">
 <h3 id="org915de9a">backups!</h3>
 <div class="outline-text-3" id="text-org915de9a">
 <p>
you should do backups. I haven't figured out a particularly great method here, yet. I do full VM snapshots through my cloud provider, but pulling data out of that environment on a regular basis is something I haven't worked out how to do well.  <a href="https://github.com/matrix-org/synapse/issues/2046">here</a> is a github issue that has some community opinions on what to backup, but there's still no official guidance as far as I know.
</p>
</div>
</div>
</div>

 <div id="outline-container-orgfebc999" class="outline-2">
 <h2 id="orgfebc999">talk to me about matrix!</h2>
 <div class="outline-text-2" id="text-orgfebc999">
 <p>
i really like matrix. i think there's a lot of cool stuff here, and I hope that it continues to improve. if you run into issues with matrix, have some questions about it you aren't sure where to ask, or just wanna chat about it, please talk to me! I've got several years experience running my home server, and all my friends are tired of hearing about matrix lmao. i'm  <a href="mailto:me@jowj.net">mailto:me@jowj.net</a> on email, or @jowj:awful.club on matrix.
</p>
</div>
</div>
</div>]]></description>
  <link>https://me.jowj.net/posts/using-matrix.html</link>
  <guid isPermaLink="false">https://me.jowj.net/posts/using-matrix.html</guid>
  <pubDate>Sat, 23 Jan 2021 13:46:00 -0600</pubDate>
</item>
<item>
  <title>rest api prototyping</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-orgc4759c1" class="outline-2">
 <h2 id="orgc4759c1">the problem</h2>
 <div class="outline-text-2" id="text-orgc4759c1">
 <p>
lately i've been working on a lot of web API glue projects. these are usually simple things like "service1 needs to send messages to service2 in a particular format, with a particular set of priviledges." Sometimes its more complicated, but that's usually what it breaks down to.
</p>


 <p>
at first I was writing python code the whole time, exploring the API through python (ugh) and kept getting frustrated; it felt like I wasn't able to go as fast as I would like, I kept making silly mistakes that I wouldn't catch until much later, etc. To fix this, i've moved to prototyping in  <a href="https://github.com/pashky/restclient.el">restclient.el</a> - this is a featureful rest client that you interact with through plain text (i.e., you can version control it!) within emacs. 
</p>

 <p>
this has worked great for a lot of things, but falls short when you have to generate an auth token programmatically (instead of using a static key) for each request. this problem is solvable using: a different kind of glue lol. i use python to create the auth token, org-babel to register the result and then pass it to `restclient` which will continue to be my prototyping tool of choice. this write up will go over how i stitch each part together; i'll use Cylance as an example service for api requests.
</p>
</div>
</div>

 <div id="outline-container-org9f4d1b5" class="outline-2">
 <h2 id="org9f4d1b5">Authentication and Authorization in Cylance</h2>
 <div class="outline-text-2" id="text-org9f4d1b5">
 <p>
Cylance relies on something called JWT (JSON Web Token). There's an RFC for this here:  <a href="https://tools.ietf.org/html/rfc7519">https://tools.ietf.org/html/rfc7519</a>. This is not possible to generate within `restclient`, so we do it in python.
</p>

 <p>
To generate the JWT, in Cylance's case, we care about:
</p>

 <p>
 <code>TID_VAL</code>, which is the tenant ID. You can find this by logging into the console > settings > integrations.
 <code>APP_ID</code> and  <code>APP_SECRET</code>, which is under the same place, but you'll have to expand the custom application.
</p>

 <p>
We'll add a  <code>#+name:</code> argument to the top of the  <code>org-mode</code> src block so that the output from the block can be registered for later use.
</p>
</div>

 <div id="outline-container-org774b39f" class="outline-3">
 <h3 id="org774b39f">python code</h3>
 <div class="outline-text-3" id="text-org774b39f">
 <div class="org-src-container">
 <pre class="src src-python"> <span style="color: #598249;">import</span> uuid
 <span style="color: #598249;">import</span> json
 <span style="color: #598249;">import</span> requests
 <span style="color: #598249;">import</span> jwt
 <span style="color: #598249;">import</span> pdb
 <span style="color: #598249;">from</span> datetime  <span style="color: #598249;">import</span> datetime, timedelta

 <span style="color: #5e6263;"># </span> <span style="color: #5e6263;">initial auth test setup</span>
 <span style="color: #2F7BDE;">JTI_VAL</span> =  <span style="color: #598249;">str</span>(uuid.uuid4())
 <span style="color: #2F7BDE;">TID_VAL</span> =  <span style="color: #15968D;">""</span>      <span style="color: #5e6263;"># </span> <span style="color: #5e6263;">The tenant's unique identifier.</span>
 <span style="color: #2F7BDE;">APP_ID</span> =  <span style="color: #15968D;">""</span>       <span style="color: #5e6263;"># </span> <span style="color: #5e6263;">The application's unique identifier.</span>
 <span style="color: #2F7BDE;">APP_SECRET</span> =  <span style="color: #15968D;">""</span>   <span style="color: #5e6263;"># </span> <span style="color: #5e6263;">application's secret to sign the auth token with.</span>

 <span style="color: #5e6263;"># </span> <span style="color: #5e6263;">30 minutes from now</span>
 <span style="color: #2F7BDE;">TIMEOUT</span> = 1800
 <span style="color: #2F7BDE;">NOW</span> = datetime.utcnow()
 <span style="color: #2F7BDE;">TIMEOUT_DATETIME</span> = NOW + timedelta(seconds=TIMEOUT)
 <span style="color: #2F7BDE;">EPOCH_TIME</span> =  <span style="color: #598249;">int</span>((NOW - datetime(1970, 1, 1)).total_seconds())
 <span style="color: #2F7BDE;">EPOCH_TIMEOUT</span> =  <span style="color: #598249;">int</span>((TIMEOUT_DATETIME - datetime(1970, 1, 1)).total_seconds())

 <span style="color: #2F7BDE;">AUTH_URL</span> =  <span style="color: #15968D;">"https://protectapi.cylance.com/auth/v2/token"</span>

 <span style="color: #2F7BDE;">CLAIMS</span> = {
     <span style="color: #15968D;">"exp"</span>: EPOCH_TIMEOUT,
     <span style="color: #15968D;">"iat"</span>: EPOCH_TIME,
     <span style="color: #15968D;">"iss"</span>:  <span style="color: #15968D;">"http://cylance.com"</span>,
     <span style="color: #15968D;">"sub"</span>: APP_ID,
     <span style="color: #15968D;">"tid"</span>: TID_VAL,
     <span style="color: #15968D;">"jti"</span>: JTI_VAL
}

 <span style="color: #2F7BDE;">ENCODED</span> = jwt.encode(CLAIMS, APP_SECRET, algorithm= <span style="color: #15968D;">'HS256'</span>)
 <span style="color: #5e6263;"># </span> <span style="color: #5e6263;">lol you have to decode from a bytes object to a string because</span>
 <span style="color: #5e6263;"># </span> <span style="color: #5e6263;">bytes aren't fucking json serializable</span>
 <span style="color: #5e6263;"># </span> <span style="color: #5e6263;">you never seem to need to re-encode them? python is so fucking weird.</span>
 <span style="color: #2F7BDE;">ENCODED</span> = ENCODED.decode()

 <span style="color: #2F7BDE;">PAYLOAD</span> = { <span style="color: #15968D;">"auth_token"</span>: ENCODED}
 <span style="color: #2F7BDE;">HEADERS</span> = { <span style="color: #15968D;">"Content-Type"</span>:  <span style="color: #15968D;">"application/json; charset=utf-8"</span>}
 <span style="color: #2F7BDE;">RESP</span> = requests.post(AUTH_URL, headers=HEADERS, data=json.dumps(PAYLOAD))
 <span style="color: #598249;">print</span>(json.loads(RESP.text)[ <span style="color: #15968D;">'access_token'</span>])
</pre>
</div>

 <p>
this will generate a token and attach it to the name space  <code>jwt_token</code> as defined previously.
</p>
</div>
</div>


 <div id="outline-container-org5a0b0e5" class="outline-3">
 <h3 id="org5a0b0e5">restclient example</h3>
 <div class="outline-text-3" id="text-org5a0b0e5">
 <p>
once the previous block has run to generate the json web token  we can pass it on to this restclient block and use it to query Cylance's API through  <code>restclient.el</code> going forward! in order to pass the output from the registered name we used before,  <code>jwt_token</code>, we add an argument to the  <code>BEGIN_SRC</code> header, like  <code>:var x=jwt_token</code>. Then, we can set a  <code>restclient</code> local variable equal to the  <code>org-babel</code> super-variable and use it within the rest of the src block, as seen below:
</p>

 <div class="org-src-container">
 <pre class="src src-restclient"> <span style="color: #5e6263;"># </span> <span style="color: #5e6263;">auth.test</span>
 <span style="color: #598249;">:cylance_jwt_token</span> =  <span style="color: #15968D;">:x</span>
 <span style="color: #598249;">GET</span>  <span style="color: #2F7BDE;">https://protectapi.cylance.com/users/v2?page=1&page_size=1</span>
 <span style="color: #2F7BDE;">Authorization</span>:  <span style="color: #15968D;">Bearer :cylance_jwt_token</span>
 <span style="color: #2F7BDE;">Content-Type</span>:  <span style="color: #15968D;">application/json</span>
 <span style="color: #2F7BDE;">User-Agent</span>:  <span style="color: #15968D;">Emacs Restclient</span>

</pre>
</div>

 <p>
this will return my user (again, i've disturbed the output but it is roughly what's returned):
</p>

 <div class="org-src-container">
 <pre class="src src-js">{
   <span style="color: #15968D;">"page_number"</span>: 1,
   <span style="color: #15968D;">"page_size"</span>: 1,
   <span style="color: #15968D;">"total_pages"</span>: 6,
   <span style="color: #15968D;">"total_number_of_items"</span>: 6,
   <span style="color: #15968D;">"page_items"</span>: [
    {
       <span style="color: #15968D;">"id"</span>:  <span style="color: #15968D;">""</span>,
       <span style="color: #15968D;">"tenant_id"</span>:  <span style="color: #15968D;">""</span>,
       <span style="color: #15968D;">"first_name"</span>:  <span style="color: #15968D;">""</span>,
       <span style="color: #15968D;">"last_name"</span>:  <span style="color: #15968D;">""</span>,
       <span style="color: #15968D;">"email"</span>:  <span style="color: #15968D;">"me@thiscompanyyo.isit"</span>,
       <span style="color: #15968D;">"has_logged_in"</span>:  <span style="color: #15968D;">true</span>,
       <span style="color: #15968D;">"role_type"</span>:  <span style="color: #15968D;">""</span>,
       <span style="color: #15968D;">"role_name"</span>:  <span style="color: #15968D;">"i am the boss"</span>,
       <span style="color: #15968D;">"default_zone_role_type"</span>:  <span style="color: #15968D;">""</span>,
       <span style="color: #15968D;">"default_zone_role_name"</span>:  <span style="color: #15968D;">""</span>,
       <span style="color: #15968D;">"zones"</span>: [],
       <span style="color: #15968D;">"date_last_login"</span>:  <span style="color: #15968D;">"2019-11-22T14:52:13"</span>,
       <span style="color: #15968D;">"date_email_confirmed"</span>:  <span style="color: #15968D;">null</span>,
       <span style="color: #15968D;">"date_created"</span>:  <span style="color: #15968D;">"2019-05-17T17:16:52"</span>,
       <span style="color: #15968D;">"date_modified"</span>:  <span style="color: #15968D;">"2019-05-17T17:16:52"</span>
    }
  ]
}
 <span style="color: #5e6263;">// </span> <span style="color: #5e6263;">GET https://protectapi.cylance.com/users/v2?page=1&page_size=1</span>
 <span style="color: #5e6263;">// </span> <span style="color: #5e6263;">HTTP/1.1 200 OK</span>
 <span style="color: #5e6263;">// </span> <span style="color: #5e6263;">Content-Encoding: gzip</span>
 <span style="color: #5e6263;">// </span> <span style="color: #5e6263;">Content-Type: application/json; charset=utf-8</span>
 <span style="color: #5e6263;">// </span> <span style="color: #5e6263;">Date: Fri, 22 Nov 2019 16:24:13 GMT</span>
 <span style="color: #5e6263;">// </span> <span style="color: #5e6263;">Server: openresty</span>
 <span style="color: #5e6263;">// </span> <span style="color: #5e6263;">Content-Length: 339</span>
 <span style="color: #5e6263;">// </span> <span style="color: #5e6263;">Connection: keep-alive</span>
 <span style="color: #5e6263;">// </span> <span style="color: #5e6263;">Request duration: 0.305690s</span>
</pre>
</div>
</div>
</div>
</div>

 <div id="outline-container-orgdcb4de5" class="outline-2">
 <h2 id="orgdcb4de5">Troubleshooting python and org-babel</h2>
 <div class="outline-text-2" id="text-orgdcb4de5">
 <p>
I had huge issues with python virtual environemtns and org-babel while initially setting up this environment. i once had an issue with emacs, I belive in an older version (25 or below i think) where it couldn't find my python binary on macOS. to fix this i manually set it in my  <code>init.el</code> file, which worked for a long time.
</p>

 <p>
however, if you start using venvs  <b>within emacs</b>, tools like  <code>pvenv</code> and  <code>venv</code>  <b>will not overwrite the global variable set with the new venv specific python binaries</b> if you've globally set the py binary location. This killed me. below are some blocks i used to troubleshoot what was going on.
</p>

 <p>
This one is pretty straight forward: do i have a virtual env active, and where is the python binary as seen by the shell:
</p>

 <div class="org-src-container">
 <pre class="src src-shell"> <span style="color: #598249;">echo</span> $ <span style="color: #2F7BDE;">VIRTUAL_ENV</span>
which python
</pre>
</div>

 <p>
Same deal, only "where is the python binary as seen in the python session". in my case, this was showing me the system python binary even when the  <b>shell</b> was showing me the venv binary.
</p>
 <div class="org-src-container">
 <pre class="src src-python"> <span style="color: #598249;">import</span> sys
 <span style="color: #598249;">print</span>( <span style="color: #15968D;">'\n'</span>.join(sys.path))
</pre>
</div>

 <p>
this block just proved that i could in fact import the right modules that were only in the venv.
</p>
 <div class="org-src-container">
 <pre class="src src-python"> <span style="color: #598249;">import</span> jwt
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>https://me.jowj.net/posts/api-prototyping.html</link>
  <guid isPermaLink="false">https://me.jowj.net/posts/api-prototyping.html</guid>
  <pubDate>Tue, 01 Dec 2020 18:40:00 -0600</pubDate>
</item>
<item>
  <title>blogging on github:pages with orgmode</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-org2a44f6c" class="outline-2">
 <h2 id="org2a44f6c">what i did</h2>
 <div class="outline-text-2" id="text-org2a44f6c">
 <p>
i've just moved from using markdown and jekyll to generate a static website on github pages to using org-mode and org-publish to generate static html files, also on github pages.
</p>
</div>
</div>

 <div id="outline-container-orgbf0ad62" class="outline-2">
 <h2 id="orgbf0ad62">why did i do this</h2>
 <div class="outline-text-2" id="text-orgbf0ad62">
 <p>
my setup has been a pain - i do most of my writing and thinking in  <a href="https://orgmode.org/">org mode</a>, but to post stuff on  <a href="https://me.jowj.net/">https://me.jowj.net/</a> i have to convert that to markdown (relatively easy, due to a package called  <a href="https://github.com/emacsmirror/org/blob/master/lisp/ox-md.el">ox-md</a>) and use  <a href="https://jekyllrb.com/">jekyll</a> to convert md to html and handle the generation of the site. the problem with jekyll is that it  <i>sucks</i>. its a tool based on the ruby ecosystem, and since I actually publish my stuff so infrequently every time i use it i have to update something about my ruby environment. this adds probably 10-20 minutes while I remember / look up which commands i'm supposed to run and why, and figuring out what things are actually broken this time.
</p>


 <p>
theming in jekyll i also don't really enjoy. i think its a fine way to get started with an easy, responsive look to a blog, but if you wanna have more particular say about it you probably will end up writing your own css. 
</p>


 <p>
i wanted a way to handle multiple rss feeds; i wanted to be able to blog about personal bullshit AND project/technical work in the same site. obviously, most people are not going to give a shit about both of those things at the same time, so separating the rss feeds out seemed like a pretty straightforward way of handling that! ultimately this was harder than i wanted it to be, but it does seem to work!
</p>


 <p>
i also just thought it would be cool to do everything within emacs (because my brain is broken lol). now the site is built with emacs and org mode entirely! 
</p>
</div>
</div>

 <div id="outline-container-org979614e" class="outline-2">
 <h2 id="org979614e">how it works</h2>
 <div class="outline-text-2" id="text-org979614e">
 <p>
most of the configuration and automation is in two files:  <a href="https://github.com/jowj/jowj.github.io/blob/master/publish.el">publish.el</a> and  <a href="https://github.com/jowj/jowj.github.io/blob/master/Makefile">Makefile</a> (raw links, also pasted below). publish.el has by far the most stuff in it, Makefile is just stupid simple automation.
</p>
</div>
 <div id="outline-container-org4bf7377" class="outline-3">
 <h3 id="org4bf7377">publish.el</h3>
 <div class="outline-text-3" id="text-org4bf7377">
 <p>
i cribbed from several places to build this. in particular, two folks had done something similar and i referred to their work heavily. see the  <a href="#orgc3d98a0">credits & references</a> entry.
</p>

 <p>
one of the ways I differed from some of the other configurations I referenced was that i wanted the publishing process to be distinct from my personal  <a href="https://git.awful.club/jowj/chd/src/branch/master/.emacs.d">emacs configuration</a>. publishing from within emacs itself is pretty cool, but it'll be cooler when i can publish by just uploading .org files and having github actions run a container and my publishing function on  <code>git push</code>. i'm not there yet but  <a href="https://gjhenrique.com/meta.html">some people are doing this already with gitlab</a>.
</p>

 <p>
since i won't be using my personal emacs config, i'll have to setup package management here as well:
</p>
 <div class="org-src-container">
 <pre class="src src-elisp" id="org6f275bd"> <span style="color: #5e6263;">;;;; </span> <span style="color: #5e6263;">package setup</span>
( <span style="color: #598249;">require</span> ' <span style="color: #15968D;">ox-publish</span>)
(package-initialize)

( <span style="color: #598249;">require</span> ' <span style="color: #15968D;">package</span>)
( <span style="color: #598249;">setq</span> package-archives
      '(( <span style="color: #15968D;">"melpa"</span> .  <span style="color: #15968D;">"http://melpa.milkbox.net/packages/"</span>)
        ( <span style="color: #15968D;">"gnu"</span> .  <span style="color: #15968D;">"http://elpa.gnu.org/packages/"</span>)
        ( <span style="color: #15968D;">"elpy"</span> .  <span style="color: #15968D;">"http://jorgenschaefer.github.io/packages/"</span>)))

( <span style="color: #598249;">unless</span> (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

( <span style="color: #598249;">eval-when-compile</span>
  ( <span style="color: #598249;">require</span> ' <span style="color: #15968D;">use-package</span>))

( <span style="color: #598249;">use-package</span>  <span style="color: #15968D;">htmlize</span>
   <span style="color: #598249;">:ensure</span> t)

( <span style="color: #598249;">use-package</span>  <span style="color: #15968D;">webfeeder</span>
   <span style="color: #598249;">:ensure</span> t)
</pre>
</div>

 <p>
man i got SO stuck on how to do syntax highlighting AND use my own custom css. if you use the stock html and css templates that ship with org mode (i.e. don't customize anything at all) you can easily add syntax highlighting using the  <code>htmlize</code> package. if you override the stock templates then you don't get syntax highlighting by default!! 
</p>

 <p>
the actual solution ended up being so simple i'm mad its not in any of the documentation I found expressly, so I'm going to make sure i write a googlable phrase about it:
</p>

 <ul class="org-ul"> <li>"fix syntax highlighting when using custom css in emacs org mode by defining font-locks manually."</li>
</ul> <div class="org-src-container">
 <pre class="src src-elisp" id="org78b7372"> <span style="color: #5e6263;">;; </span> <span style="color: #5e6263;">fucking custom colors eluded me until this shit.</span>
 <span style="color: #5e6263;">;; </span> <span style="color: #5e6263;">reference this guy's setup, he's a king:</span>
 <span style="color: #5e6263;">;; </span> <span style="color: #5e6263;">https://gitlab.com/jgkamat/jgkamat.gitlab.io/-/blob/master/jgkamat-website.el</span>
( <span style="color: #598249;">when</span> noninteractive
   <span style="color: #5e6263;">;; </span> <span style="color: #5e6263;">Don't run in interactive mode to avoid breaking your colors</span>
  (custom-set-faces
   '(default                      ((t ( <span style="color: #598249;">:foreground</span>  <span style="color: #15968D;">"#909396"</span>  <span style="color: #598249;">:background</span>  <span style="color: #15968D;">"#262626"</span>))))
   '(font-lock-builtin-face       ((t ( <span style="color: #598249;">:foreground</span>  <span style="color: #15968D;">"#598249"</span>))))
   '(font-lock-comment-face       ((t ( <span style="color: #598249;">:foreground</span>  <span style="color: #15968D;">"#5e6263"</span>))))
   '(font-lock-constant-face      ((t ( <span style="color: #598249;">:foreground</span>  <span style="color: #15968D;">"#15968D"</span>))))
   '(font-lock-function-name-face ((t ( <span style="color: #598249;">:foreground</span>  <span style="color: #15968D;">"#2F7BDE"</span>))))
   '(font-lock-keyword-face       ((t ( <span style="color: #598249;">:foreground</span>  <span style="color: #15968D;">"#598249"</span>))))
   '(font-lock-string-face        ((t ( <span style="color: #598249;">:foreground</span>  <span style="color: #15968D;">"#15968D"</span>))))
   '(font-lock-type-face                       ((t ( <span style="color: #598249;">:foreground</span>  <span style="color: #15968D;">"#598249"</span>))))
   '(font-lock-variable-name-face ((t ( <span style="color: #598249;">:foreground</span>  <span style="color: #15968D;">"#2F7BDE"</span>))))
   '(font-lock-warning-face       ((t ( <span style="color: #598249;">:foreground</span>  <span style="color: #15968D;">"#bd3832"</span>  <span style="color: #598249;">:weight</span> bold)))))
  ( <span style="color: #598249;">setq</span> htmlize-use-rgb-map 'force))
</pre>
</div>

 <p>
ok so that's all the like 'setup' type shit out of the way. after that i ran into several frustrating org mode limitations or…decisions made by org mode that make blogging with it a bit of a pain. A ton of the config is dedicated to working around those problems.
</p>

 <ul class="org-ul"> <li>why the fuck is an 'html validation link' part of the default postamble config? who is this useful for?</li>
 <li>why does the largest orgmode package built for static site generation for org mode think you want to build off of a single org mode file with blog posts as headings?
 <ul class="org-ul"> <li>that is stupid. org-mode itself doesn't care about your file hierarchy and neither should you :|</li>
</ul></li>
 <li>why is defining a custom stylesheet such a pain in the dick lmao.
 <ul class="org-ul"> <li>there's a like a million ways to do this, ranging from updating default variables to adding it in every single .org file, but they all have frustrating limitations!</li>
</ul></li>
 <li>having nav buttons at the top or side of the screen for different categories is pretty basic but unsupported by default. you have to write your own weird hack for this; i chose to add it to the preamble on every page using dynamic file name expansion, but i saw several different solutions to this problem:
 <ul class="org-ul"> <li>some people did it in the preamble like me</li>
 <li>some people did it in the postamble</li>
 <li>some people created a file called like "nav.org" and used org-mode  <code>includes</code> on every page to reference it. I thought this was the ugliest option in general, but its by far the easiest!</li>
</ul></li>
</ul> <div class="org-src-container">
 <pre class="src src-elisp"> <span style="color: #5e6263;">;;;; </span> <span style="color: #5e6263;">custom var/func defs to deal with frustrating org limitations</span>
( <span style="color: #598249;">setq</span> make-backup-files nil)
( <span style="color: #598249;">setq</span> org-html-postamble t
      org-html-validation-link nil)

( <span style="color: #598249;">defvar</span>  <span style="color: #2F7BDE;">org-blog-date-format</span>  <span style="color: #15968D;">"%h %d, %Y"</span>
   <span style="color: #15968D;">"Format for displaying publish dates."</span>)

( <span style="color: #598249;">defvar</span>  <span style="color: #2F7BDE;">jlj/root</span> (expand-file-name  <span style="color: #15968D;">"."</span>))
( <span style="color: #598249;">defvar</span>  <span style="color: #2F7BDE;">org-blog-head</span>  <span style="color: #15968D;">"<link rel=\"stylesheet\" type=\"text/css\" href=\"css/my-dark.css\"/>"</span>)
( <span style="color: #598249;">defvar</span>  <span style="color: #2F7BDE;">org-personal-head</span>  <span style="color: #15968D;">"<link rel=\"stylesheet\" type=\"text/css\" href=\"../posts/css/my-dark.css\"/>"</span>)
( <span style="color: #598249;">defvar</span>  <span style="color: #2F7BDE;">org-index-head</span>  <span style="color: #15968D;">"<link rel=\"stylesheet\" type=\"text/css\" href=\"posts/css/my-dark.css\"/>"</span>)

( <span style="color: #598249;">defun</span>  <span style="color: #2F7BDE;">jlj/preamble</span> (info)
   <span style="color: #15968D;">"Return preamble as a string.  INFO."</span>
   <span style="color: #15968D;">"This is required to dynamically link shit depending on where you on in the folder structure."</span>
  ( <span style="color: #598249;">let*</span> ((file (plist-get info  <span style="color: #598249;">:input-file</span>))
         (prefix (file-relative-name (expand-file-name jlj/root)
                                     (file-name-directory file))))
    (format
      <span style="color: #15968D;">"<a href=\"%1$s/index.html\">home</a></span>
 <span style="color: #15968D;"><a href=\"%1$s/posts/articles.html\">essays</a></span>
 <span style="color: #15968D;"><a href=\"%1$s/personal/articles.html\">diary</a></span>
 <span style="color: #15968D;"><a href=\"https://git.awful.club/projects\">projects</a></span>
 <span style="color: #15968D;"><a href=\"%1$s/resume.pdf\">resume</a>"</span>
     prefix)))

( <span style="color: #598249;">setq</span> org-html-postamble-format `(( <span style="color: #15968D;">"en"</span> ,(concat  <span style="color: #15968D;">"<p class=\"creator\">Made with %c</p></p>"</span>))))
( <span style="color: #598249;">setq</span> org-html-preamble #'jlj/preamble)
</pre>
</div>

 <p>
 <code>org-publish-project-alist</code> is the meat of the static site generation. you define a list of components of your site and have different variable settings for each component. i have several different components created:
</p>

 <ul class="org-ul"> <li> <code>site-org</code> publishes all my technical writing.</li>
 <li> <code>site-index</code> publishes just my home page.</li>
 <li> <code>site-personal</code> publishes my diary entries.</li>
 <li> <code>site-static</code> is currently not doing what I want it to! its  <i>supposed</i> copy ANY file that is not a .org file and publish it, but it doesn't seem to be doing that. I'm  <span class="underline">very</span> certain its just because I don't understand its arguments well, so, like, don't copy my config about that. its still being worked on!</li>
</ul> <p>
 <code>jlj/publish-sitemap</code> is a function that wraps  <code>org-publish-sitemap</code> and adds in my own css file. as far as I can tell, there is NO OTHER WAY to get the sitemap file generated by the  <code>org-publish-project-alist</code> declarations to use custom css. infuriating.  because this is emacs and org mode there are of course other work-arounds possible here, but!! this should not require a work around, this is basic!!
</p>

 <div class="org-src-container">
 <pre class="src src-elisp" id="orgd4de980">( <span style="color: #598249;">setq</span> org-publish-project-alist
      (list
       (list  <span style="color: #15968D;">"site-org"</span>
              <span style="color: #598249;">:base-directory</span>  <span style="color: #15968D;">"./source"</span>
              <span style="color: #598249;">:recursive</span> t
              <span style="color: #598249;">:exclude</span>  <span style="color: #15968D;">"index.org"</span>
              <span style="color: #598249;">:publishing-function</span> '(org-html-publish-to-html)
              <span style="color: #598249;">:publishing-directory</span>  <span style="color: #15968D;">"./posts/"</span>
              <span style="color: #598249;">:sitemap-title</span>  <span style="color: #15968D;">"a list of stuff i wrote"</span>
              <span style="color: #598249;">:sitemap-filename</span>  <span style="color: #15968D;">"articles.org"</span>
              <span style="color: #598249;">:auto-sitemap</span> t
              <span style="color: #598249;">:sitemap-style</span> 'list
              <span style="color: #598249;">:sitemap-sort-files</span> 'anti-chronologically
              <span style="color: #598249;">:html-html5-fancy</span> t
              <span style="color: #598249;">:html-doctype</span>  <span style="color: #15968D;">"html5"</span>
              <span style="color: #598249;">:html-head-include-default-style</span> nil
              <span style="color: #598249;">:html-head</span> org-blog-head)
       (list  <span style="color: #15968D;">"site-index"</span>
              <span style="color: #598249;">:base-directory</span>  <span style="color: #15968D;">"."</span>
              <span style="color: #598249;">:recursive</span> nil
              <span style="color: #598249;">:publishing-function</span> '(org-html-publish-to-html)
              <span style="color: #598249;">:publishing-directory</span>  <span style="color: #15968D;">"."</span>
              <span style="color: #598249;">:html-head</span> org-index-head)
       (list  <span style="color: #15968D;">"site-personal"</span>
              <span style="color: #598249;">:base-directory</span>  <span style="color: #15968D;">"./personal-source"</span>
              <span style="color: #598249;">:recursive</span> t
              <span style="color: #598249;">:exclude</span>  <span style="color: #15968D;">"index.org"</span>
              <span style="color: #598249;">:publishing-function</span> '(org-html-publish-to-html)
              <span style="color: #598249;">:publishing-directory</span>  <span style="color: #15968D;">"./personal/"</span>
              <span style="color: #598249;">:sitemap-title</span>  <span style="color: #15968D;">"personal bullshit"</span>
              <span style="color: #598249;">:sitemap-filename</span>  <span style="color: #15968D;">"articles.org"</span>
              <span style="color: #598249;">:auto-sitemap</span> t
              <span style="color: #598249;">:sitemap-style</span> 'list
              <span style="color: #598249;">:sitemap-sort-files</span> 'anti-chronologically
              <span style="color: #598249;">:html-head-include-default-style</span> nil
              <span style="color: #598249;">:html-head</span> org-personal-head)
       (list  <span style="color: #15968D;">"site-static"</span>
              <span style="color: #598249;">:base-directory</span>  <span style="color: #15968D;">"."</span>
              <span style="color: #598249;">:base-extension</span> 'any
              <span style="color: #598249;">:exclude</span>  <span style="color: #15968D;">"\\.org\\'"</span>
              <span style="color: #598249;">:publishing-directory</span>  <span style="color: #15968D;">"."</span>
              <span style="color: #598249;">:publishing-function</span> 'org-publish-attachment
              <span style="color: #598249;">:recursive</span> t)
       (list  <span style="color: #15968D;">"site"</span>  <span style="color: #598249;">:components</span> '( <span style="color: #15968D;">"site-org"</span>))))



( <span style="color: #598249;">defun</span>  <span style="color: #2F7BDE;">jlj/publish-sitemap</span> (title list)
   <span style="color: #15968D;">"Replace org-publish-sitemap.  TITLE and LIST are magic fuck u linter i won't do wat u tell me."</span>

  (org-publish-sitemap
   (concat  <span style="color: #15968D;">"#+TITLE: "</span> title  <span style="color: #15968D;">"\n"</span>
           <span style="color: #15968D;">"#+HTML_HEAD: <link rel=\"stylesheet\" type=\"text/css\" href=\"css/my-dark.css\">"</span>
           <span style="color: #15968D;">"\n"</span>
          (org-list-to-org list)))
)
</pre>
</div>


 <p>
finally, i actually publish the site and then generate some rss feeds. i want so specifically talk about the rss feed generation; the most well known package for rss feed gen is  <a href="https://github.com/yyr/org-mode/blob/master/contrib/lisp/ox-rss.el">ox-rss</a> and i could not get that package to work. i used  <a href="https://gitlab.com/ambrevar/emacs-webfeeder/-/tree/master">webfeeder.el</a> and had much better luck with it.
</p>

 <p>
its important to note that i wrap org-publish-all and the webfeeder lines with my own function  <code>jlj/publish</code>. the org project  <span class="underline">must</span> be published prior to the webfeeder feed generation.  <code>webfeeder.el</code> works by generating a feed based on your .html files, not your .org files. 
</p>
 <div class="org-src-container">
 <pre class="src src-elisp">( <span style="color: #598249;">defun</span>  <span style="color: #2F7BDE;">jlj/publish</span> ()
     <span style="color: #15968D;">"Wrap org-publish-all so that its easier to modify this in the future."</span>
    (org-publish-all)

     <span style="color: #5e6263;">;; </span> <span style="color: #5e6263;">build rss for interesting posts</span>
    ( <span style="color: #598249;">setq</span> webfeeder-default-author  <span style="color: #15968D;">"josiah  <a href="mailto:me%40jowj.net"><me@jowj.net></a>"</span>)
    (webfeeder-build
      <span style="color: #15968D;">"rss.xml"</span>
      <span style="color: #15968D;">"./posts"</span>
      <span style="color: #15968D;">"https://me.jowj.net/posts/"</span>

     (delete  <span style="color: #15968D;">"index.html"</span>
             (mapcar ( <span style="color: #598249;">lambda</span> (f) (replace-regexp-in-string  <span style="color: #15968D;">".*/posts/"</span>  <span style="color: #15968D;">""</span> f))
                     (file-expand-wildcards  <span style="color: #15968D;">"~/Documents/projects/jlj-blog/posts/*.html"</span>)))
      <span style="color: #598249;">:builder</span> 'webfeeder-make-rss
      <span style="color: #598249;">:title</span>  <span style="color: #15968D;">"josiahs blog"</span>
      <span style="color: #598249;">:description</span>  <span style="color: #15968D;">"projects/writing bullshit in rss."</span>)

     <span style="color: #5e6263;">;; </span> <span style="color: #5e6263;">build rss for diary posts</span>
    (webfeeder-build
      <span style="color: #15968D;">"rss.xml"</span>
      <span style="color: #15968D;">"./personal"</span>
      <span style="color: #15968D;">"https://me.jowj.net/personal/"</span>

     (delete  <span style="color: #15968D;">"index.html"</span>
             (mapcar ( <span style="color: #598249;">lambda</span> (f) (replace-regexp-in-string  <span style="color: #15968D;">".*/personal/"</span>  <span style="color: #15968D;">""</span> f))
                     (file-expand-wildcards  <span style="color: #15968D;">"~/Documents/projects/jlj-blog/personal/*.html"</span>)))
      <span style="color: #598249;">:builder</span> 'webfeeder-make-rss
      <span style="color: #598249;">:title</span>  <span style="color: #15968D;">"josiahs diary"</span>
      <span style="color: #598249;">:description</span>  <span style="color: #15968D;">"personal bullshit in rss."</span>)
  )
</pre>
</div>
</div>
</div>
 <div id="outline-container-org29256d7" class="outline-3">
 <h3 id="org29256d7">Makefile</h3>
 <div class="outline-text-3" id="text-org29256d7">
 <p>
super easy makefile lol. 
</p>
 <ul class="org-ul"> <li>run emacs with no init file</li>
 <li>tell it to load publish.el</li>
 <li>tell it run my publishing function</li>
</ul> <p>
on clean, tell it to remove a bunch of files and folders that gave me grief. many of these won't be generated anymore, i fixed the problem that necessitated me adding the corresponding line! but i leave it in anyway.
</p>

 <p>
if you're unfamiliar with make you can still use this without learning  <i>any</i> make primitives, you can just, in the directory with the Makefile, run these commands:
</p>
 <ul class="org-ul"> <li> <code>make</code> will build the site from scratch</li>
 <li> <code>make clean</code> will delete all the generated files.</li>
</ul> <div class="org-src-container">
 <pre class="src src-makefile"> <span style="color: #5e6263;"># </span> <span style="color: #5e6263;">Makefile for jlj blog</span>
 <span style="color: #2F7BDE;">.PHONY</span>: all publish publish_no_init

 <span style="color: #2F7BDE;">all</span>: publish

 <span style="color: #2F7BDE;">publish</span>: publish.el
         <span style="color: #598249;">@</span>echo  <span style="color: #15968D;">"Publishing...."</span>
        emacs --no-init --script publish.el --funcall=jlj/publish

 <span style="color: #2F7BDE;">clean</span>:
         <span style="color: #598249;">@</span>echo  <span style="color: #15968D;">"Cleaning up.."</span>
         <span style="color: #598249;">@</span>rm -rvf *.elc
         <span style="color: #598249;">@</span>rm -rvf posts/*.html
         <span style="color: #598249;">@</span>rm -fv index.html
         <span style="color: #598249;">@</span>rm -fv index.xml
         <span style="color: #598249;">@</span>rm -fv posts/articles.xml
         <span style="color: #598249;">@</span>rm -fv posts/rss.xml
         <span style="color: #598249;">@</span>rm -fv posts/atom.xml
         <span style="color: #598249;">@</span>rm -fv personal/*.html
         <span style="color: #598249;">@</span>rm -fv personal/rss.xml
         <span style="color: #598249;">@</span>rm -fv personal/atom.xml
         <span style="color: #598249;">@</span>rm -fv source/*.html
         <span style="color: #598249;">@</span>rm -rvf ~/.org-timestamps/*

</pre>
</div>
</div>
</div>
</div>
 <div id="outline-container-orgc3d98a0" class="outline-2">
 <h2 id="orgc3d98a0">credits & references</h2>
 <div class="outline-text-2" id="text-orgc3d98a0">
 <p>
there are a TON of places to read about doing this sort of thing. two folks in particular were really useful to me:
</p>
 <ul class="org-ul"> <li> <a href="https://ambrevar.xyz/index.html">Ambrevar</a>,  (in particular,  <a href="https://ambrevar.xyz/blog-architecture/index.html">https://ambrevar.xyz/blog-architecture/index.html</a>)</li>
 <li> <a href="https://jgkamat.gitlab.io/">jgkamat</a>,  (in particular,  <a href="https://jgkamat.gitlab.io/blog/website1.html">https://jgkamat.gitlab.io/blog/website1.html</a>)</li>
</ul> <p>
jgkamat's publish files lead me to the font-face-locking approach to custom syntax highlighting.
ambrevar actually wrote the webfeeder.el solution to the idiot org rss problem. both of these folks are fantastic.
</p>

 <ul class="org-ul"> <li> <a href="https://orgmode.org/worg/">https://orgmode.org/worg/</a> has several useful entries on org > html publishing</li>
 <li> <a href="https://www.brautaset.org/articles/2017/blogging-with-org-mode.html">https://www.brautaset.org/articles/2017/blogging-with-org-mode.html</a></li>
 <li> <a href="https://opensource.com/article/20/3/blog-emacs">https://opensource.com/article/20/3/blog-emacs</a></li>
 <li> <a href="https://www.sadiqpk.org/blog/2018/08/08/blogging-with-org-mode.html">https://www.sadiqpk.org/blog/2018/08/08/blogging-with-org-mode.html</a></li>
 <li>a lot more i've forgotten.</li>
</ul></div>
</div>
</div>]]></description>
  <link>https://me.jowj.net/posts/blogging-on-ghpages-with-orgmode.html</link>
  <guid isPermaLink="false">https://me.jowj.net/posts/blogging-on-ghpages-with-orgmode.html</guid>
  <pubDate>Tue, 01 Dec 2020 18:40:00 -0600</pubDate>
</item>
<item>
  <title>emacs on catalina</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-org980cb63" class="outline-2">
 <h2 id="org980cb63">early days</h2>
 <div class="outline-text-2" id="text-org980cb63">
 <p>
i had to move from mojave to catalina during the beta to test some security tooling for work (spoilers: it sucked, though now cylance has actually fixed their catalina problems) and the process was r o u g h almost entirely because of emacs.
</p>

 <p>
at first there was only a single reddit post detailing what emacs users might need to know about. it linked to  <a href="https://gist.github.com/dive/f64c645a9086afce8e5dd2590071dbf9">this gist</a>.
</p>

 <p>
this basically says to run this lisp to add your proper emacs path to the proper exclusions and then you won't have any problems. Ok great! but that didn't work. I could now  <i>launch</i> emacs from Spotlight and navigate around my Docs/Downloads/whatever, but i was totally unable to  <i>swap</i> to emacs from Spotlight. this also impacted using hammerspoon as a launcher, i'm guessing because the primative behind both mechanisms is the same.
</p>
</div>
</div>

 <div id="outline-container-orga5303ce" class="outline-2">
 <h2 id="orga5303ce">partial fix</h2>
 <div class="outline-text-2" id="text-orga5303ce">
 <p>
later that week, a few other people said you needed to whitelist  <span class="underline">ruby's</span> executable because that was actually how homebrew installed emacs; the emacs executable is called from a ruby script (which is called by a ball rolling down a train track headed towards a toothpick which,) and thus needs to be whitelisted as well. but that didn't work either (though they were actually correct that ruby was involved).
</p>

 <p>
since I could at least launch and navigate around with my then-current janky set up i stopped spending Paid Time on it and moved on. i ran the the rest of the catalina beta out and then reported back on my experience with our security tools, whatever. a few weeks ago i finally got mad enough at the situation to spend some more time looking at this and found the answer really soon! apparently a bunch of people had similar problems to me and so there are several blogs about the problem now! the one I found most helpful was  <a href="https://spin.atomicobject.com/2019/12/12/fixing-emacs-macos-catalina/">this guy</a>.
</p>
</div>
</div>

 <div id="outline-container-org7b10b55" class="outline-2">
 <h2 id="org7b10b55">jankiest fix</h2>
 <div class="outline-text-2" id="text-org7b10b55">
 <p>
he gives a good breakdown as to why this is needed  <span class="underline">instead of</span> the ruby application whitelisting. here's the quick fix:
</p>

 <div class="org-src-container">
 <pre class="src src-shell">% cd  /Applications /Emacs.app /Contents /MacOS
% mv Emacs Emacs-launcher
% mv Emacs-x86_64- 10_14 Emacs
% cd  /Applications /Emacs.app /Contents /
% rm  -rf _CodeSignature
</pre>
</div>


 <p>
this is not like, super great. its makes your configuration brittle and it will break when you update emacs! version 27 is looming i hear. but at least i can fucking swap to emacs again.
</p>
</div>
</div>
</div>]]></description>
  <link>https://me.jowj.net/posts/emacs-on-catalina.html</link>
  <guid isPermaLink="false">https://me.jowj.net/posts/emacs-on-catalina.html</guid>
  <pubDate>Tue, 01 Dec 2020 18:40:00 -0600</pubDate>
</item>
<item>
  <title>Moving from 1pass to bitwarden</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-org6cea658" class="outline-2">
 <h2 id="org6cea658">background</h2>
 <div class="outline-text-2" id="text-org6cea658">
 <p>
I've been a 1pass user for a long time. I started with 1pass4; I used it with Mac and Windows endpoints. I've used it on iOS for almost that entire time. I've tried to use other things, like Enpass when I first tried to move to linux as a home os, or LastPass for certain jobs, but frankly none of them hold up.
</p>

 <p>
Since early 2019 i've been running linux at home for everything and that has finally made 1password too painful such that i'm moving off of it. 1pass is a great app and has fantastic compatability for most people but it sucks horribly on linux; until now i've been using 1passX with a 1password.com account. This is the  <i>only</i> way to use 1password on a linux os. 1pass4 ran fine under wine, 1pass6 i think could work for some people (but i never got it to).
</p>

 <p>
1passX is a browser extension. This means there's a few things that make me uncomfortable or that downright don't match with my work flow:
</p>

 <ol class="org-ol"> <li>having to open a browser on first boot to get access to passwords suck if you also have your browser bring back sessions on launch. everything takes forever to load and you're probably just looking for an entry real quick anyway.</li>
 <li>doing anything cryptographically sensitive in a browser extension is a little shady. I trust 1password enough to handle this, but this won't be true of everyone. info:
 <ul class="org-ul"> <li>here's a famous NCC write up about it:  <a href="https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/august/javascript-cryptography-considered-harmful/">https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/august/javascript-cryptography-considered-harmful/</a></li>
 <li>browser extensions that run on every page can be risky enough already; if that browser extension could be tricked to pass instructions to your local vault when it shouldn't (say, send an 'autofill' query over to your vault for 'google.com' when you're actually on 'g00gle.com' or whatever) then a browser bug could lead to your entire vault being exfilled.</li>
</ul></li>
 <li>swapping quickly between anything i'm working on and my vault sucked because you had to pull up your browser and then move to the vault tab and then login. boo.</li>
</ol> <p>
because of these issues i started looking for alternatives
</p>
</div>
</div>
 <div id="outline-container-org53351a3" class="outline-2">
 <h2 id="org53351a3">bitwarden</h2>
 <div class="outline-text-2" id="text-org53351a3">
 <p>
since i was looking for a new service anyway I decided to start with bitwarden, which I liked in abstract because I could eventually self host it. I never really moved beyond them; i've kept appraised of other options like keepass, lastpass, remembear, and others, but none of them have all of these things:
</p>

 <ul class="org-ul"> <li>open source</li>
 <li>self hosted (as an option)</li>
 <li>ability to share passwords between accounts</li>
 <li>good to great mobile experience on iOS  <span class="underline">and</span> Android</li>
 <li>totp support</li>
</ul> <p>
i've been living on bitwarden for ~1 week at this point and haven't felt any real urge to go back to 1Password. I started with their hosted service so that I didn't have to go through a ton of self hosting work to figure out if I hated it or not. Now that I know that I like it, I can slowly start automating deploys and maintenance tasks and mirror data from their hosted service to my own instance as quickly or slowly as I please.
</p>
</div>
</div>

 <div id="outline-container-org37f408f" class="outline-2">
 <h2 id="org37f408f">the bad</h2>
 <div class="outline-text-2" id="text-org37f408f">
 <p>
bad news first. 
</p>
 <ol class="org-ol"> <li>bitwarden's desktop clients are all electron. I expect there to be vulns discovered here eventually that impact these clients. This is still better than the shared sandbox that is my browser IMO, but that's not an experts opinion, that's just mine.</li>
 <li>migrating over from 1pass was both great and more confusing than it needed to be.
 <ul class="org-ul"> <li>TOTP migration from 1pass is REALLY confusing, depending on what kind of bw account you have. I'll talk about it more specifically further down.</li>
 <li>You cannot export from 1password.com accounts through 1passX. You  <i>must</i> export from a 1pass7 install on a mac or windows machine. REALLY frustrating!</li>
 <li>You cannot export Document objects  <i>at all</i>. You have to manually download them one at a time! Talk about letting your programming abstraction rule the user interface. an obvious mistake on 1pass's part, i hope they fix that eventually.</li>
</ul></li>
 <li>bitwarden's UI is just not as polished as 1passwords. 1password is so good at that shit.</li>
</ol></div>
</div>

 <div id="outline-container-org8cf25bb" class="outline-2">
 <h2 id="org8cf25bb">totp issue specifics</h2>
 <div class="outline-text-2" id="text-org8cf25bb">
 <p>
bitwarden has different kinds of accounts, and there are different bitwarden service hosts that have different features. A free bitwarden account doesn't have TOTP support; that's one of the things they leave beyond a paywall. It seems pretty fair to me.
</p>

 <p>
I created a free bitwarden account on bitwarden.com, exported one of my vaults, imported it into my new bw account, and then started poking around. Pretty much everything came over right away, but I noticed that the TOTP fields were hidden. "Makes sense", I thought, they said that they didn't offer that feature until you pay.
</p>

 <p>
So I fuck around and do some more testing and poking and decide to spend the $10 to get premium bw. When i do that, the TOTP codes on all 2FA entries magically appear! So all that data succesfully gets exported > imported and saved, its just not visible to you. Kind of confusing UX tbqh, but ok makes sense.
</p>

 <p>
The desktop apps, being electron, got cached without showing the TOTP codes; super confusing again, and frustrating. if you need to clear the cache of an electron app you can follow this stack overflow post:
  <a href="https://stackoverflow.com/questions/31446782/how-to-clear-the-cache-data-in-electronatom-shell">https://stackoverflow.com/questions/31446782/how-to-clear-the-cache-data-in-electronatom-shell</a>
</p>
</div>
</div>

 <div id="outline-container-orgcc844fd" class="outline-2">
 <h2 id="orgcc844fd">the cool</h2>
 <div class="outline-text-2" id="text-orgcc844fd">
 <p>
On bitwarden's side there's a lot to be said for their importer from 1password's bespoke format. that just works! rare as hell, even brought in totp codes, great.
</p>

 <p>
bw also handles documents in a sane format; rather than creating 'objects' as a seperate entry type in the vault it has them as attachments to any other kind of entry. DUH. I don't want just a signature pdf in my vault, either divorced from context or linked but still polluting my results. Stupid. bw reverts to older 1pass behavior with documents, letting me attach them anywhere and keep notes about the specific document. rad.
</p>

 <p>
bw is open source! totally! the clients, the servers, the mobile apps, its rad! a fair critique of bw as a self hosted project is that the servers are  <i>beefy</i> fucks. That's true.  since its open source some weirdo has built a rust implementation that is API compatible with all clients. I think this is rad as hell (though i'm not about to trust all my vault secrets to Some Dude's implementation).
</p>

 <p>
A counter argument to my worry about the server is that bw encrypts everything before sending to the server per 3. here:
 <a href="https://help.bitwarden.com/article/why-should-i-trust-bitwarden/">https://help.bitwarden.com/article/why-should-i-trust-bitwarden/</a>
</p>

 <p>
I still am not gonna run bitwarden <sub>rs</sub> though.
</p>

 <p>
read about the bitwarden <sub>rs</sub> project here:
 <a href="https://github.com/dani-garcia/bitwarden_rs">https://github.com/dani-garcia/bitwarden_rs</a>
</p>
</div>
</div>

 <div id="outline-container-orgddf6772" class="outline-2">
 <h2 id="orgddf6772">next steps</h2>
 <div class="outline-text-2" id="text-orgddf6772">
 <p>
i'm prboably gonna stay on bw premium on their paid service for a while. its only $10 anyway, cheaper than 1pass. I think the next think I might do is mirror my server data onto something i self host; that way even if bw gets breached and owned so bad their backups are hosed I can still restore on prem.
</p>

 <p>
i haven't figured out how i could do that, but it seems like it should be pretty feasible. the fact that i could even do that is pretty fuckin' cool, tbqh.
</p>
</div>
</div>
</div>]]></description>
  <link>https://me.jowj.net/posts/moving-from-1pass-to-bitwarden.html</link>
  <guid isPermaLink="false">https://me.jowj.net/posts/moving-from-1pass-to-bitwarden.html</guid>
  <pubDate>Tue, 01 Dec 2020 18:40:00 -0600</pubDate>
</item>
<item>
  <title>pynit</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-org81aa799" class="outline-2">
 <h2 id="org81aa799">what is this</h2>
 <div class="outline-text-2" id="text-org81aa799">
 <p>
pynit is a personal archival script that relies on  <a href="https://pinboard.in">pinboard</a>. it pulls in posts through the reddit api (by way of `praw`) and adds them to the linked `pinboard` account. you can get it  <a href="https://github.com/jowj/pynit">here</a>.
</p>
</div>
</div>

 <div id="outline-container-orgbc82620" class="outline-2">
 <h2 id="orgbc82620">why i made it</h2>
 <div class="outline-text-2" id="text-orgbc82620">
 <p>
i use reddit (foolish, i know) to keep up to date on a lot of bullshit in the world, although primarily:
</p>

 <ul class="org-ul"> <li>fashion</li>
 <li>emacs / org-mode</li>
 <li>powershell</li>
 <li>homelabs</li>
 <li>secops</li>
</ul> <p>
my typical workflow for seeing a piece of content that was useful looked something like:
</p>

 <ul class="org-ul"> <li>view content</li>
 <li>peruse comments (usually, the most useful part of the reddit entry)</li>
 <li>find something that i want to revist</li>
 <li>save it for later inside of reddit</li>
 <li>forget about it forever, maybe revisit it within 3 months if i'm very bored</li>
 <li>in the interim, many of the comments are deleted, links don't work, parent URL points to a dead webserver</li>
</ul> <p>
this is obviously not ideal. pynit helps me with about half of those problems. specifically, because i pay for `pinboard`'s archiving service, i can preserve the context in the comment section of the reddit entry. links may still be broken, but i'm perfectly fine with using archive.org for viewing the links later if i need to. as i mentioned, comments end up being the most useful thing to me most of the time.
</p>

 <p>
it should be noted that `pinboard` can be used to archive the parent URL context as well, but i opted not to do that in order to preserve some semblance of readability in my `pinboard` feed.
</p>

 <p>
comments are also possible to be preserved through things resavr, ceddit, removeddit, etc. these type of sites go down regularly and are not very reliable in my experience (although resavr looks promising, if limited. it only archives comments that are deleted that are > 1000 characters). 
</p>

 <p>
now whenever i want to revisit a particular item i have all the comments preserved via pinboard, and URLs can be usable (most of the time) through archive.org.
</p>
</div>
</div>

 <div id="outline-container-org1765c62" class="outline-2">
 <h2 id="org1765c62">what I learned while i made this</h2>
 <div class="outline-text-2" id="text-org1765c62">
 <p>
i learned a few things that i want to write up here, all related to python or working with rest apis:
</p>
</div>

 <div id="outline-container-orgbe6dfdd" class="outline-3">
 <h3 id="orgbe6dfdd">python</h3>
 <div class="outline-text-3" id="text-orgbe6dfdd">
 <p>
i learned about  <a href="https://github.com/cool-RR/PySnooper">pysnoop</a> through  <a href="https://twitter.com/mrled">@mrled</a>and it was SO useful. there may be more ways to use it (read their github page, its got great examples), but i primarily used it by decorating a function i wanted to inspect, like:
</p>

 <div class="org-src-container">
 <pre class="src src-python"> <span style="color: #598249;">import</span> pysnooper

 <span style="color: #598249;">@pysnooper.snoop</span>()
 <span style="color: #598249;">def</span>  <span style="color: #2F7BDE;">my_function</span>():
     <span style="color: #2F7BDE;">var1</span> =  <span style="color: #15968D;">'thing1'</span>
     <span style="color: #2F7BDE;">var2</span> =  <span style="color: #15968D;">'thing2'</span>

     <span style="color: #598249;">return</span>(var1 + var2)

 <span style="color: #598249;">print</span>(my_function())

</pre>
</div>

 <p>
this would return:
</p>

 <div class="org-src-container">
 <pre class="src src-python">19:54:53.048881 call         4  <span style="color: #598249;">def</span>  <span style="color: #2F7BDE;">my_function</span>():
19:54:53.049021 line         5      <span style="color: #2F7BDE;">var1</span> =  <span style="color: #15968D;">'thing1'</span>
New var:.......  <span style="color: #2F7BDE;">var1</span> =  <span style="color: #15968D;">'thing1'</span>
19:54:53.049094 line         6      <span style="color: #2F7BDE;">var2</span> =  <span style="color: #15968D;">'thing2'</span>
New var:.......  <span style="color: #2F7BDE;">var2</span> =  <span style="color: #15968D;">'thing2'</span>
19:54:53.049155 line         8      <span style="color: #598249;">return</span>(var1 + var2)
19:54:53.049197  <span style="color: #598249;">return</span>       8      <span style="color: #598249;">return</span>(var1 + var2)
Return value:..  <span style="color: #15968D;">'thing1thing2'</span>
thing1thing2
</pre>
</div>

 <p>
this allowed me to simple add a single line to an exist function  <i>without modifying the function itself at all</i> and make sure I was actually doing what I thought I was doing. this was huge for letting me sanity check my work.
</p>
</div>
</div>

 <div id="outline-container-orgdeebed5" class="outline-3">
 <h3 id="orgdeebed5">rest apis</h3>
 <div class="outline-text-3" id="text-orgdeebed5">
 <p>
a lot of people (a lot of people!!) just have you use get requests instead of posts, even when you're posting stuff. i am not a Web Man, so i don't understand the why, but if all you've ever done is  <i>read</i> about working with rest apis then the real world may be confusing when you try and post something that requires a get request. the  <a href="https://pinboard.in/api">pinboard api docs</a> for instance require get requests when you mean posts for backwards compatibility with the `delicious` api.
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>https://me.jowj.net/posts/pynit.html</link>
  <guid isPermaLink="false">https://me.jowj.net/posts/pynit.html</guid>
  <pubDate>Tue, 01 Dec 2020 18:40:00 -0600</pubDate>
</item>
<item>
  <title>tvm at a new company</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-org7a605a6" class="outline-2">
 <h2 id="org7a605a6">no new problems</h2>
 <div class="outline-text-2" id="text-org7a605a6">
 <p>
i recently started a new job and am faced with the usual: "please set up our scanners and Make Us Secure", "What Do These Alerts Mean", etc etc. i keep thinking about the scanning / threat and vulnerability management (TVM) aspect, so i want to write about that. here are a list of questions that i've been asking myself, along with some possible answers.
</p>
</div>

 <div id="outline-container-org2b6c00a" class="outline-3">
 <h3 id="org2b6c00a">using an existing scanning install or starting over</h3>
 <div class="outline-text-3" id="text-org2b6c00a">
 <p>
it may be reasonable to nuke an install if:
</p>

 <ul class="org-ul"> <li>data existing in the install is massively out of date / bad / for some reason is fucked up data</li>
 <li>data existing in the install doesn't tell you anything useful; 'these ips are alive' isn't useful.</li>
</ul> <p>
times when you definitely should not nuke an install:
</p>
 <ul class="org-ul"> <li>if the install is tied to existing agents; losing those agent connections would be a mistake</li>
</ul> <p>
those are really the only hard constraints i can think of. everything else seems pretty grey
</p>
</div>
</div>

 <div id="outline-container-orgb250713" class="outline-3">
 <h3 id="orgb250713">are naming schemes important enough to spend time on</h3>
 <div class="outline-text-3" id="text-orgb250713">
 <p>
hard yes. some of the names in use at my new place are frankly  <i>hilarious</i>. and bad. "aaah, a scan template called 'corp users', what do you suppo - oh, its for scanning production? of course."
</p>

 <p>
i picked a rough naming scheme template for all objects, and then tweaked it on a per-object-type basis, i.e.:
</p>

 <p>
ProductName - Environment - Geolocation - Data
</p>

 <p>
"search - prod - aus" is pretty straight forward, and then the 'data' field can be where you really express differences between the object classes. if it ends up looking a bit different between object classes, that's ok. the most important thing for naming schemes is consistency to the rules you set. everything else, while still important, is secondary.
</p>
</div>
</div>

 <div id="outline-container-orgfa8495b" class="outline-3">
 <h3 id="orgfa8495b">a note on scan schedules</h3>
 <div class="outline-text-3" id="text-orgfa8495b">
 <p>
think about what a particular scan is trying to accomplish. if the goal of a scan is to get data from  <i>corporate servers</i> then a typical overnight maintenance window makes sense. 
</p>

 <p>
if the goal is to get data from  <i>the entire corporate netblock</i> then scanning over night is probably really stupid, unless the entire company works during that time. after all, most companies are deploying large laptop fleets that all get taken home at the end of the day! instead, you can tackle this by doing one of these:
</p>

 <ul class="org-ul"> <li>scan midday, during the work hours, at several different times to catch differently shifted people</li>
 <li>install agents on all laptop / movable devices</li>
</ul> <p>
ok, apparently the title should be "two notes on scans". if your goal is to scan sensitive production servers make sure you reach out to the ops team that manages those servers. they should know, you should have a paper trail proving you at least made best efforts to communicate, etc.
</p>
</div>
</div>


 <div id="outline-container-org7b49c0f" class="outline-3">
 <h3 id="org7b49c0f">what other things should I check on</h3>
 <div class="outline-text-3" id="text-org7b49c0f">
 <ul class="org-ul"> <li>is the OS backing the scanning app still getting updates? a lot of people fire and forget scan setups so make sure you're not running shit off some idiots ubuntu 12 install.</li>
 <li>how much of the infrastructure are we actually scanning? do have blind spots?
 <ul class="org-ul"> <li>if there isn't an ipam then this will be reaaaaal hard to figure out, but its very important.</li>
</ul></li>
 <li>is your license sufficient or will you have to get more approved before you can actually achieve good coverage?</li>
 <li>are there any non-expiring exceptions?
 <ul class="org-ul"> <li>if so, i recommend nuking them and rebuilding them with at the most a 1 year expiration date; force the company to re-eval once a year if they really want these risks.</li>
</ul></li>
</ul></div>
</div>
</div>
</div>]]></description>
  <link>https://me.jowj.net/posts/tvm-at-a-new-company.html</link>
  <guid isPermaLink="false">https://me.jowj.net/posts/tvm-at-a-new-company.html</guid>
  <pubDate>Tue, 01 Dec 2020 18:40:00 -0600</pubDate>
</item>
<item>
  <title>vcards</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-org4678124" class="outline-2">
 <h2 id="org4678124">computer recovery after a death in the family</h2>
 <div class="outline-text-2" id="text-org4678124">
 <p>
this past week my dad and I helped my grandmother with a few Computer Things. my grandfather died at the end of last year and the process of getting "Computer Things" to a usable state for my grandmother was pretty rough.
</p>

 <p>
One of the things that was unexpectedly frustrating was transferring stuff (photos, contacts, whatever) from my granddad's account to my grandmothers. as near as i can tell, a different family member had been helping my grandmother and closed several of my grandfather's old accounts. including email accounts and  <i>iCloud</i> accounts. 
</p>
</div>

 <div id="outline-container-org3c5aa10" class="outline-3">
 <h3 id="org3c5aa10">outline</h3>
 <div class="outline-text-3" id="text-org3c5aa10">
 <p>
normally, transferring contacts from one persons icloud to another's is pretty straight forward (there's an export button on icloud.com), but if you can't succesfully auth to icloud it gets a lot trickier. there's probably a few ways to do this, but the tack i ended up taking was:
</p>

 <ol class="org-ol"> <li>find a totally different source for the contacts (in this case, my grandfather's outlook 2010 install)</li>
 <li>export those contacts to vcards</li>
 <li>import those vcards to icloud.com under the new account</li>
</ol> <p>
That is the bones of what happened, but the details kept screwing me over.
</p>
</div>
</div>

 <div id="outline-container-org075e62d" class="outline-3">
 <h3 id="org075e62d">specifics</h3>
 <div class="outline-text-3" id="text-org075e62d">
 <p>
first, outlook 2010 contact exports by default come out in an outlook specific format (.msg) that cannot be imported into icloud. ok well fine, surely there's a straight forward way to deal with that. 
</p>

 <p>
good news: you can directly export contacts from outlook to vcf
bad news: its fucking hidden behind a "send as business card" dialogue option that is fucking unintuitive. thanks 2010 microsoft.
worse news: it sends a very old .vcf format, 2.1. The minimum I could get working with icloud was 3.0
</p>

 <p>
ok well surely you can convert the 2.1 version to 3.0? in fact, what is even the difference? here is some wikipedia examples:
</p>
 <div class="org-src-container">
 <pre class="src src-text">BEGIN:VCARD
VERSION:2.1
N:Gump;Forrest;;Mr.
FN:Forrest Gump
ORG:Bubba Gump Shrimp Co.
TITLE:Shrimp Man
PHOTO;GIF:http://www.example.com/dir_photos/my_photo.gif
TEL;WORK;VOICE:(111) 555-1212
TEL;HOME;VOICE:(404) 555-1212
ADR;WORK;PREF:;;100 Waters Edge;Baytown;LA;30314;United States of America
LABEL;WORK;PREF;ENCODING=QUOTED-PRINTABLE;CHARSET=UTF-8:100 Waters Edge=0D=
 =0ABaytown\, LA 30314=0D=0AUnited States of America
ADR;HOME:;;42 Plantation St.;Baytown;LA;30314;United States of America
LABEL;HOME;ENCODING=QUOTED-PRINTABLE;CHARSET=UTF-8:42 Plantation St.=0D=0A=
 Baytown, LA 30314=0D=0AUnited States of America
EMAIL:forrestgump@example.com
REV:20080424T195243Z
END:VCARD
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-text">BEGIN:VCARD
VERSION:3.0
N:Gump;Forrest;;Mr.;
FN:Forrest Gump
ORG:Bubba Gump Shrimp Co.
TITLE:Shrimp Man
PHOTO;VALUE=URI;TYPE=GIF:http://www.example.com/dir_photos/my_photo.gif
TEL;TYPE=WORK,VOICE:(111) 555-1212
TEL;TYPE=HOME,VOICE:(404) 555-1212
ADR;TYPE=WORK,PREF:;;100 Waters Edge;Baytown;LA;30314;United States of America
LABEL;TYPE=WORK,PREF:100 Waters Edge\nBaytown\, LA 30314\nUnited States of America
ADR;TYPE=HOME:;;42 Plantation St.;Baytown;LA;30314;United States of America
LABEL;TYPE=HOME:42 Plantation St.\nBaytown\, LA 30314\nUnited States of America
EMAIL:forrestgump@example.com
REV:2008-04-24T19:52:43Z
END:VCARD
</pre>
</div>

 <p>
the thing that caused most of the issues for the contact set I was working on was the  <code>TEL;</code> lines. the type declarations, when present, needed to be altered. to fix this is pretty simple:
</p>

 <div class="org-src-container">
 <pre class="src src-shell">cat /path/to/dir/* > all-outlook-contacts.vcf
sed -e  <span style="color: #15968D;">'s/TEL;/TEL;TYPE=/g'</span> -e  <span style="color: #15968D;">'s/VERSION:2.1/VERSION:3.0/g'</span> ../new-contacts/all-outlook-contacts.vcf > ../new-contacts/all-CLEANED.vcf
</pre>
</div>

 <p>
yes thats right, ' i am very 3 now ' is most of the work lmao. this worked, but I still couldn't import the vcf files to icloud - it would think for a while, then error saying that at least one of the entries was unreadable. i skimmed through the file visually and found some lines that were interesting - on a few cards there was a LANGUAGE declaration:
</p>

 <div class="org-src-container">
 <pre class="src src-shell">cat ../new-contacts/all-outlook-contacts.vcf | grep =en
>N; <span style="color: #2F7BDE;">LANGUAGE</span>=en-us:last first
>N; <span style="color: #2F7BDE;">LANGUAGE</span>=en-us:last first
>N; <span style="color: #2F7BDE;">LANGUAGE</span>=en-us:last first
>N; <span style="color: #2F7BDE;">LANGUAGE</span>=en-us:last first
</pre>
</div>

 <p>
wtf is that, that isn't mentioned in the spec until vcards 4.0
</p>

 <p>
my best guess is that this is just some Fancy Colour from outlook specifically, because nobody else was talking about this based on quick google searches. I just removed it from these 4 cards and went on to import them to icloud succesfully.
</p>
</div>
</div>

 <div id="outline-container-org48b3139" class="outline-3">
 <h3 id="org48b3139">what should i do when i die</h3>
 <div class="outline-text-3" id="text-org48b3139">
 <p>
the lesson i learned during this process is:
</p>
 <ul class="org-ul"> <li>don't close people's accounts right away; make sure everything is prepared before accounts are closed.</li>
 <li>by the time i die i should establish a fucking runbook to go over the necessary steps for people who aren't technically inclined</li>
 <li>open formats are great</li>
</ul></div>
</div>
</div>
</div>]]></description>
  <link>https://me.jowj.net/posts/vcards.html</link>
  <guid isPermaLink="false">https://me.jowj.net/posts/vcards.html</guid>
  <pubDate>Tue, 01 Dec 2020 18:40:00 -0600</pubDate>
</item>
</channel>
</rss>
