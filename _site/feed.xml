<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-03-07T11:10:28-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">y don’t u blog about it</title><subtitle></subtitle><author><name>jowj</name></author><entry><title type="html">moving from 1pass to bitwarden</title><link href="http://localhost:4000/projects/2020/03/07/moving_from_1pass_to_bitwarden.html" rel="alternate" type="text/html" title="moving from 1pass to bitwarden" /><published>2020-03-07T00:00:00-06:00</published><updated>2020-03-07T00:00:00-06:00</updated><id>http://localhost:4000/projects/2020/03/07/moving_from_1pass_to_bitwarden</id><content type="html" xml:base="http://localhost:4000/projects/2020/03/07/moving_from_1pass_to_bitwarden.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#org0df767d&quot;&gt;background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#orgf81f62d&quot;&gt;bitwarden looks promising&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#orgf188a5c&quot;&gt;the bad&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#orgbf26cd6&quot;&gt;totp issue specifics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#orgbaa5c66&quot;&gt;the cool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#orge53ee63&quot;&gt;next steps&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a id=&quot;org0df767d&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;background&quot;&gt;background&lt;/h1&gt;

&lt;p&gt;I’ve been a 1pass user for a long time. I started with 1pass4; I used it with Mac and Windows clients. I’ve used it on iOS for almost that entire time. I’ve tried to use other things, like Enpass when I first tried to move to linux as a home os, or LastPass for certain jobs, but frankly none of them have held up.&lt;/p&gt;

&lt;p&gt;Since early 2019 i’ve been running linux at home for everything and that has finally made 1password too painful such that i’m moving off of it. 1pass is a great app and has fantastic compatability for most people but it sucks horribly on linux; until now i’ve been using 1passX with a 1password.com account. This is the &lt;em&gt;only&lt;/em&gt; way to use 1password on a linux os now. you used to be able to run 1pass4 under wine just fine, and if your vault format never updated to a later edition then maybe that’ll still work for you. If you have a 1pass7 formatted vault it won’t work though.&lt;/p&gt;

&lt;p&gt;1passX is a browser extension. This means there’s a few things that make me uncomfortable or that downright don’t match with my work flow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;having to open a browser on first boot to get access to passwords suck if you also have your browser bring back sessions on launch. everything takes forever to load and you’re probably just looking for an entry real quick anyway.&lt;/li&gt;
  &lt;li&gt;doing anything cryptographically sensitive in a browser extension is a little shady. I trust 1password enough to handle this, but this won’t be true of everyone. info:
    &lt;ul&gt;
      &lt;li&gt;here’s a famous NCC write up about it: &lt;a href=&quot;https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/august/javascript-cryptography-considered-harmful/&quot;&gt;https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/august/javascript-cryptography-considered-harmful/&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;browser extensions that run on every page can be risky enough already; if that browser extension could be tricked to pass instructions to your local vault when it shouldn’t (say, send an ‘autofill’ query over to your vault for ‘google.com’ when you’re actually on ‘g00gle.com’ or whatever) then a browser bug could lead to your entire vault being exfilled.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;swapping quickly between anything i’m working on and my vault sucked because you had to pull up your browser and then move to the vault tab and then login. boo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;because of these issues i started looking for alternatives&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;orgf81f62d&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;bitwarden-looks-promising&quot;&gt;bitwarden looks promising&lt;/h1&gt;

&lt;p&gt;since i was looking for a new service anyway I decided to start with bitwarden, which I liked in abstract because I could eventually self host it. I never really moved beyond them; i’ve kept apprised of other options like keepass, lastpass, remembear, and others, but none of them have all of these things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;open source&lt;/li&gt;
  &lt;li&gt;self hosted (as an option)&lt;/li&gt;
  &lt;li&gt;ability to share passwords between accounts&lt;/li&gt;
  &lt;li&gt;good to great mobile experience on iOS &lt;span class=&quot;underline&quot;&gt;and&lt;/span&gt; Android&lt;/li&gt;
  &lt;li&gt;totp support&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;i’ve been living on bitwarden for ~1 week at this point and haven’t felt any real urge to go back to 1Password. I started with their hosted service so that I didn’t have to go through a ton of self hosting work to figure out if I hated it or not. Now that I know that I like it, I can slowly start automating deploys and maintenance tasks and mirror data from their hosted service to my own instance as quickly or slowly as I please.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;orgf188a5c&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-bad&quot;&gt;the bad&lt;/h1&gt;

&lt;p&gt;bad news first.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;bitwarden’s desktop clients are all electron. I expect there to be vulns discovered here eventually that impact these clients. This is still better than the shared sandbox that is my browser IMO, but that’s not an experts opinion, that’s just mine.&lt;/li&gt;
  &lt;li&gt;migrating over from 1pass was both great and more confusing than it needed to be.
    &lt;ul&gt;
      &lt;li&gt;TOTP migration from 1pass is REALLY confusing, depending on what kind of bw account you have. I’ll talk about it more specifically further down.&lt;/li&gt;
      &lt;li&gt;You cannot export from 1password.com accounts through 1passX. You &lt;em&gt;must&lt;/em&gt; export from a 1pass7 install on a mac or windows machine. REALLY frustrating!&lt;/li&gt;
      &lt;li&gt;You cannot export Document objects &lt;em&gt;at all&lt;/em&gt;. You have to manually download them one at a time! Talk about letting your programming abstraction rule the user interface. an obvious mistake on 1pass’s part, i hope they fix that eventually.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;bitwarden’s UI is just not as polished as 1passwords. 1password is so good at that shit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id=&quot;orgbf26cd6&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;totp-issue-specifics&quot;&gt;totp issue specifics&lt;/h1&gt;

&lt;p&gt;bitwarden has different kinds of accounts, and there are different bitwarden service hosts that have different features. A free bitwarden account doesn’t have TOTP support; that’s one of the things they leave beyond a paywall. It seems pretty fair to me.&lt;/p&gt;

&lt;p&gt;I created a free bitwarden account on bitwarden.com, exported one of my vaults, imported it into my new bw account, and then started poking around. Pretty much everything came over right away, but I noticed that the TOTP fields were hidden. “Makes sense”, I thought, they said that they didn’t offer that feature until you pay.&lt;/p&gt;

&lt;p&gt;So I fuck around and do some more testing and poking and decide to spend the $10 to get premium bw. When i do that, the TOTP codes on all 2FA entries magically appear! So all that data succesfully gets exported &amp;gt; imported and saved, its just not visible to you. Kind of confusing UX tbqh, but ok makes sense.&lt;/p&gt;

&lt;p&gt;The desktop apps, being electron, got cached without showing the TOTP codes; super confusing again, and frustrating. if you need to clear the cache of an electron app you can follow this stack overflow post:
 &lt;a href=&quot;https://stackoverflow.com/questions/31446782/how-to-clear-the-cache-data-in-electronatom-shell&quot;&gt;https://stackoverflow.com/questions/31446782/how-to-clear-the-cache-data-in-electronatom-shell&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;orgbaa5c66&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-cool&quot;&gt;the cool&lt;/h1&gt;

&lt;p&gt;On bitwarden’s side there’s a lot to be said for their importer from 1password’s bespoke format. that just works! rare as hell, even brought in totp codes, great.&lt;/p&gt;

&lt;p&gt;bw also handles documents in a sane format; rather than creating ‘objects’ as a seperate entry type in the vault it has them as attachments to any other kind of entry. DUH. I don’t want just a signature pdf in my vault, either divorced from context or linked but still polluting my results. Stupid. bw reverts to older 1pass behavior with documents, letting me attach them anywhere and keep notes about the specific document. rad.&lt;/p&gt;

&lt;p&gt;bw is open source! totally! the clients, the servers, the mobile apps, its rad! a fair critique of bw as a self hosted project is that the servers are &lt;em&gt;beefy&lt;/em&gt; fucks. That’s true.  since its open source some weirdo has built a rust implementation that is API compatible with all clients. I think this is rad as hell (though i’m not about to trust all my vault secrets to Some Dude’s implementation).&lt;/p&gt;

&lt;p&gt;A counter argument to my worry about the server is that bw encrypts everything before sending to the server per 3. here:
&lt;a href=&quot;https://help.bitwarden.com/article/why-should-i-trust-bitwarden/&quot;&gt;https://help.bitwarden.com/article/why-should-i-trust-bitwarden/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I still am not gonna run bitwarden&lt;sub&gt;rs&lt;/sub&gt; though.&lt;/p&gt;

&lt;p&gt;read about the bitwarden&lt;sub&gt;rs&lt;/sub&gt; project here:
&lt;a href=&quot;https://github.com/dani-garcia/bitwarden_rs&quot;&gt;https://github.com/dani-garcia/bitwarden_rs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;orge53ee63&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;next-steps&quot;&gt;next steps&lt;/h1&gt;

&lt;p&gt;i’m probably gonna stay on bw premium on their paid service for a while. its only $10 anyway, cheaper than 1pass. I think the next thing I might do is mirror my server data onto something i self host; that way even if bw gets breached and owned so bad their backups are hosed I can still restore on prem.&lt;/p&gt;

&lt;p&gt;i haven’t figured out &lt;em&gt;how&lt;/em&gt; i could do that, but it seems like it should be pretty feasible. the fact that it might even be feasible is pretty fuckin’ cool.&lt;/p&gt;</content><author><name>jowj</name></author><summary type="html">Table of Contents</summary></entry><entry><title type="html">emacs on catalina</title><link href="http://localhost:4000/projects/2019/12/29/emacs_on_catalina.html" rel="alternate" type="text/html" title="emacs on catalina" /><published>2019-12-29T00:00:00-06:00</published><updated>2019-12-29T00:00:00-06:00</updated><id>http://localhost:4000/projects/2019/12/29/emacs_on_catalina</id><content type="html" xml:base="http://localhost:4000/projects/2019/12/29/emacs_on_catalina.html">&lt;h1 id=&quot;emacs-on-catalina&quot;&gt;emacs on catalina&lt;/h1&gt;

&lt;h2 id=&quot;early-days&quot;&gt;early days&lt;/h2&gt;
&lt;p&gt;i had to move from mojave to catalina during the beta to test some security tooling for work (spoilers: it sucked, though now cylance has actually fixed their catalina problems) and the process was r o u g h almost entirely because of emacs.&lt;/p&gt;

&lt;p&gt;at first there was only a single reddit post detailing what emacs users might need to know about. it linked to &lt;a href=&quot;https://gist.github.com/dive/f64c645a9086afce8e5dd2590071dbf9&quot;&gt;this gist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;this basically says to run this lisp to add your proper emacs path to the proper exclusions and then you won’t have any problems. Ok great! but that didn’t work. I could now /launch/ emacs from Spotlight and navigate around my Docs/Downloads/whatever, but i was totally unable to /swap/ to emacs from Spotlight. this also impacted using hammerspoon as a launcher, i’m guessing because the primative behind both mechanisms is the same.&lt;/p&gt;

&lt;h2 id=&quot;partial-fix&quot;&gt;partial fix&lt;/h2&gt;
&lt;p&gt;later that week, a few other people said you needed to whitelist &lt;em&gt;ruby’s&lt;/em&gt; executable because that was actually how homebrew installed emacs; the emacs executable is called from a ruby script (which is called by a ball rolling down a train track headed towards a toothpick which,) and thus needs to be whitelisted as well. but that didn’t work either (though they were actually correct that ruby was involved).&lt;/p&gt;

&lt;p&gt;since I could at least launch and navigate around with my then-current janky set up i stopped spending Paid Time on it and moved on. i ran the the rest of the catalina beta out and then reported back on my experience with our security tools, whatever. a few weeks ago i finally got mad enough at the situation to spend some more time looking at this and found the answer really soon! apparently a bunch of people had similar problems to me and so there are several blogs about the problem now! the one I found most helpful was &lt;a href=&quot;https://spin.atomicobject.com/2019/12/12/fixing-emacs-macos-catalina/&quot;&gt;this guy&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;jankiest-fix&quot;&gt;jankiest fix&lt;/h2&gt;
&lt;p&gt;he gives a good breakdown as to why this is needed &lt;em&gt;instead of&lt;/em&gt; the ruby application whitelisting. here’s the quick fix:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      %  &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt;  /Applications /Emacs.app /Contents /MacOS
      %  mv Emacs Emacs-launcher
      %  mv Emacs-x86_64- 10_14 Emacs
      %  &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt;  /Applications /Emacs.app /Contents /
      %  rm  &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; _CodeSignature
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;this is not like, super great. its makes your configuration brittle and it will break when you update emacs! version 27 is looming i hear. but at least i can fucking swap to emacs again.&lt;/p&gt;</content><author><name>jowj</name></author><summary type="html">emacs on catalina</summary></entry><entry><title type="html">rest api prototyping</title><link href="http://localhost:4000/projects/2019/11/22/cylance_api_prototyping.html" rel="alternate" type="text/html" title="rest api prototyping" /><published>2019-11-22T00:00:00-06:00</published><updated>2019-11-22T00:00:00-06:00</updated><id>http://localhost:4000/projects/2019/11/22/cylance_api_prototyping</id><content type="html" xml:base="http://localhost:4000/projects/2019/11/22/cylance_api_prototyping.html">&lt;p&gt;&lt;a id=&quot;org055b087&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-problem&quot;&gt;the problem&lt;/h1&gt;

&lt;p&gt;lately i’ve been working on a lot of web API glue projects. these are usually simple things like “service1 needs to send messages to service2 in a particular format, with a particular set of priviledges.” Sometimes its more complicated, but that’s usually what it breaks down to.&lt;/p&gt;

&lt;p&gt;at first I was writing python code the whole time, exploring the API through python (ugh) and kept getting frustrated; it felt like I wasn’t able to go as fast as I would like, I kept making silly mistakes that I wouldn’t catch until much later, etc. To fix this, i’ve moved to prototyping in &lt;a href=&quot;https://github.com/pashky/restclient.el&quot;&gt;restclient.el&lt;/a&gt; - this is a featureful rest client that you interact with through plain text (i.e., you can version control it!) within emacs.&lt;/p&gt;

&lt;p&gt;this has worked great for a lot of things, but falls short when you have to generate an auth token programmatically (instead of using a static key) for each request. this problem is solvable using: a different kind of glue lol. i use python to create the auth token, org-babel to register the result and then pass it to &lt;code class=&quot;highlighter-rouge&quot;&gt;restclient&lt;/code&gt; which will continue to be my prototyping tool of choice. this write up will go over how i stitch each part together; i’ll use Cylance as an example service for api requests.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;org4a1c34b&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;authentication-and-authorization-in-cylance&quot;&gt;Authentication and Authorization in Cylance&lt;/h1&gt;

&lt;p&gt;Cylance relies on something called JWT (JSON Web Token). There’s an RFC for this here: &lt;a href=&quot;https://tools.ietf.org/html/rfc7519&quot;&gt;https://tools.ietf.org/html/rfc7519&lt;/a&gt;. This is not possible to generate within &lt;code class=&quot;highlighter-rouge&quot;&gt;restclient&lt;/code&gt;, so we do it in python.&lt;/p&gt;

&lt;p&gt;To generate the JWT, in Cylance’s case, we care about:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TID_VAL&lt;/code&gt;, which is the tenant ID. You can find this by logging into the console &amp;gt; settings &amp;gt; integrations.
&lt;code class=&quot;highlighter-rouge&quot;&gt;APP_ID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;APP_SECRET&lt;/code&gt;, which is under the same place, but you’ll have to expand the custom application.&lt;/p&gt;

&lt;p&gt;We’ll add a &lt;code class=&quot;highlighter-rouge&quot;&gt;#+name:&lt;/code&gt; argument to the top of the &lt;code class=&quot;highlighter-rouge&quot;&gt;org-mode&lt;/code&gt; src block so that the output from the block can be registered for later use.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;uuid&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;jwt&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pdb&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timedelta&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;# initial auth test setup&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JTI_VAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TID_VAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;# The tenant's unique identifier.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;APP_ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;# The application's unique identifier.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;APP_SECRET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# application's secret to sign the auth token with.&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;# 30 minutes from now&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TIMEOUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1800&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NOW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utcnow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TIMEOUT_DATETIME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timedelta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TIMEOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EPOCH_TIME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NOW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1970&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EPOCH_TIMEOUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TIMEOUT_DATETIME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1970&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;AUTH_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://protectapi.cylance.com/auth/v2/token&quot;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;CLAIMS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;exp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EPOCH_TIMEOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;iat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EPOCH_TIME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;iss&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://cylance.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;sub&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APP_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;tid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TID_VAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;jti&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JTI_VAL&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;ENCODED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLAIMS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APP_SECRET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'HS256'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# lol you have to decode from a bytes object to a string because&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# bytes aren't fucking json serializable&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# you never seem to need to re-encode them? python is so fucking weird.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ENCODED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENCODED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;PAYLOAD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;auth_token&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENCODED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HEADERS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/json; charset=utf-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RESP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AUTH_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEADERS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PAYLOAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RESP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'access_token'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;this will generate a token and attach it to the name space &lt;code class=&quot;highlighter-rouge&quot;&gt;jwt_token&lt;/code&gt; as defined previously.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;orge661742&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;restclient-example&quot;&gt;restclient example&lt;/h2&gt;

&lt;p&gt;once the previous block has run to generate the json web token  we can pass it on to this restclient block and use it to query Cylance’s API through &lt;code class=&quot;highlighter-rouge&quot;&gt;restclient.el&lt;/code&gt; going forward! in order to pass the output from the registered name we used before, &lt;code class=&quot;highlighter-rouge&quot;&gt;jwt_token&lt;/code&gt;, we add an argument to the &lt;code class=&quot;highlighter-rouge&quot;&gt;BEGIN_SRC&lt;/code&gt; header, like &lt;code class=&quot;highlighter-rouge&quot;&gt;:var x=jwt_token&lt;/code&gt;. Then, we can set a &lt;code class=&quot;highlighter-rouge&quot;&gt;restclient&lt;/code&gt; local variable equal to the &lt;code class=&quot;highlighter-rouge&quot;&gt;org-babel&lt;/code&gt; super-variable and use it within the rest of the src block, as seen below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# auth.test
:cylance_jwt_token = :x
GET https://protectapi.cylance.com/users/v2?page=1&amp;amp;page_size=1
Authorization: Bearer :cylance_jwt_token
Content-Type: application/json
User-Agent: Emacs Restclient
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;this will return my user (again, i’ve disturbed the output but it is roughly what’s returned):&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;page_number&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;page_size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;total_pages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;total_number_of_items&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;page_items&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tenant_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;first_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;last_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;me@thiscompanyyo.isit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;has_logged_in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;role_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;role_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;i am the boss&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;default_zone_role_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;default_zone_role_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zones&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;date_last_login&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2019-11-22T14:52:13&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;date_email_confirmed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;date_created&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2019-05-17T17:16:52&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;date_modified&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2019-05-17T17:16:52&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//protectapi.cylance.com/users/v&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?page=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;amp;page_size=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;HTTP/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Content-Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;gzip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;application/json;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;charset=utf&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-8&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Fri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Nov&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2019&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;GMT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;openresty&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Content-Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;339&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;keep-alive&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.305690&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a id=&quot;orgce4eb0b&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;troubleshooting-python-and-org-babel&quot;&gt;Troubleshooting python and org-babel&lt;/h1&gt;

&lt;p&gt;I had huge issues with python virtual environemtns and org-babel while initially setting up this environment. i once had an issue with emacs, I belive in an older version (25 or below i think) where it couldn’t find my python binary on macOS. to fix this i manually set it in my &lt;code class=&quot;highlighter-rouge&quot;&gt;init.el&lt;/code&gt; file, which worked for a long time.&lt;/p&gt;

&lt;p&gt;however, if you start using venvs &lt;em&gt;within emacs&lt;/em&gt;, tools like &lt;code class=&quot;highlighter-rouge&quot;&gt;pvenv&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;venv&lt;/code&gt; &lt;em&gt;will not overwrite the global variable set with the new venv specific python binaries&lt;/em&gt; if you’ve globally set the py binary location. This killed me. below are some blocks i used to troubleshoot what was going on.&lt;/p&gt;

&lt;p&gt;This one is pretty straight forward: do i have a virtual env active, and where is the python binary as seen by the shell:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$VIRTUAL_ENV&lt;/span&gt;
    which python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Same deal, only “where is the python binary as seen in the python session”. in my case, this was showing me the system python binary even when the &lt;em&gt;shell&lt;/em&gt; was showing me the venv binary.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;this block just proved that i could in fact import the right modules that were only in the venv.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;jwt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>jowj</name></author><summary type="html"></summary></entry><entry><title type="html">Org_babel_restclient</title><link href="http://localhost:4000/2019/11/21/org_babel_restclient.html" rel="alternate" type="text/html" title="Org_babel_restclient" /><published>2019-11-21T00:00:00-06:00</published><updated>2019-11-21T00:00:00-06:00</updated><id>http://localhost:4000/2019/11/21/org_babel_restclient</id><content type="html" xml:base="http://localhost:4000/2019/11/21/org_babel_restclient.html"></content><author><name>jowj</name></author><summary type="html"></summary></entry><entry><title type="html">mojo v2</title><link href="http://localhost:4000/projects/2019/11/13/mojov2.html" rel="alternate" type="text/html" title="mojo v2" /><published>2019-11-13T00:00:00-06:00</published><updated>2019-11-13T00:00:00-06:00</updated><id>http://localhost:4000/projects/2019/11/13/mojov2</id><content type="html" xml:base="http://localhost:4000/projects/2019/11/13/mojov2.html">&lt;h1 id=&quot;mojobot-v2&quot;&gt;Mojobot v2&lt;/h1&gt;
&lt;p&gt;so, i had to rewrite &lt;code class=&quot;highlighter-rouge&quot;&gt;mojo&lt;/code&gt;. there’s a couple reasons here, the big ones are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;slack came out with a new api a bit before i finished writing v1. they wanted to eventually deprecate v1, though that seems to be a bit of a pipe dream!&lt;/li&gt;
  &lt;li&gt;v1 of the api has some limitations vs v2&lt;/li&gt;
  &lt;li&gt;when i moved &lt;code class=&quot;highlighter-rouge&quot;&gt;mojo&lt;/code&gt;’s running install to a brand new server it pulled the latest version of the pythogn &lt;code class=&quot;highlighter-rouge&quot;&gt;slackclient&lt;/code&gt; package without me realizing it (because i didn’t pin a version in the pipfile) and I thought slack ALREADY deprecated v1. lmao.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;i’m gonna bitch about how annoying the move to v2 was, how frustrating i find working entirely through decorators (and i hope people will point out ways in which i’m doing something &lt;em&gt;stupid&lt;/em&gt; or misunderstanding or whatever, because its been REAL frustrating), that sort of shit.&lt;/p&gt;

&lt;h2 id=&quot;at-a-glance&quot;&gt;at a glance&lt;/h2&gt;
&lt;p&gt;v2 had to split out the dual functionality of v1 into two different containers; mojo-web and mojo-rtm. these use two different slack api engines in order to accomplish their goals:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rtm&lt;/code&gt; stands for real time messaging, and allows &lt;code class=&quot;highlighter-rouge&quot;&gt;mojo&lt;/code&gt; to react to slack messages as they get sent.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;web&lt;/code&gt; is a what-you’d-expect library that allows &lt;code class=&quot;highlighter-rouge&quot;&gt;mojo&lt;/code&gt; to send messages to the slack service.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This functionality had to be split because of the way the &lt;code class=&quot;highlighter-rouge&quot;&gt;rtmclient&lt;/code&gt; runs now:
&lt;code class=&quot;highlighter-rouge&quot;&gt;@slack.RTMClient.run_on(event='message')&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;this decorates a function, and then &lt;code class=&quot;highlighter-rouge&quot;&gt;RTM_CLIENT.start()&lt;/code&gt; loops. somehow. I don’t know how this part works.&lt;/p&gt;

&lt;h2 id=&quot;decorators&quot;&gt;decorators&lt;/h2&gt;
&lt;p&gt;so, what i know of decorators: almost nothing. i know that a decorator modifies the function it decorates. i don’t understand how calling &lt;code class=&quot;highlighter-rouge&quot;&gt;RTM_CLIENT.start()&lt;/code&gt; ends up looping over a…&lt;code class=&quot;highlighter-rouge&quot;&gt;thing&lt;/code&gt;? that modifies a function. its weird.&lt;/p&gt;

&lt;p&gt;it feels like moving from the explicit declarations of v1 to hiding what’s actually happening in v2 is a blatant step back in readability. maybe that’s not true once i have a better understanding of decorators.&lt;/p&gt;</content><author><name>jowj</name></author><summary type="html">Mojobot v2 so, i had to rewrite mojo. there’s a couple reasons here, the big ones are: slack came out with a new api a bit before i finished writing v1. they wanted to eventually deprecate v1, though that seems to be a bit of a pipe dream! v1 of the api has some limitations vs v2 when i moved mojo’s running install to a brand new server it pulled the latest version of the pythogn slackclient package without me realizing it (because i didn’t pin a version in the pipfile) and I thought slack ALREADY deprecated v1. lmao.</summary></entry><entry><title type="html">tvm at a new company</title><link href="http://localhost:4000/security/2019/06/24/new_company_tvm.html" rel="alternate" type="text/html" title="tvm at a new company" /><published>2019-06-24T00:00:00-05:00</published><updated>2019-06-24T00:00:00-05:00</updated><id>http://localhost:4000/security/2019/06/24/new_company_tvm</id><content type="html" xml:base="http://localhost:4000/security/2019/06/24/new_company_tvm.html">&lt;h1 id=&quot;no-new-problems&quot;&gt;no new problems&lt;/h1&gt;
&lt;p&gt;i recently started a new job and am faced with the usual: “please set up our scanners and Make Us Secure”, “What Do These Alerts Mean”, etc etc. i keep thinking about the scanning / threat and vulnerability management (TVM) aspect, so i want to write about that. here are a list of questions that i’ve been asking myself, along with some possible answers.&lt;/p&gt;

&lt;h2 id=&quot;using-an-existing-scanning-install-or-starting-over&quot;&gt;using an existing scanning install or starting over&lt;/h2&gt;
&lt;p&gt;it may be reasonable to nuke an install if:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;data existing in the install is massively out of date / bad / for some reason is fucked up data&lt;/li&gt;
  &lt;li&gt;data existing in the install doesn’t tell you anything useful; ‘these ips are alive’ isn’t useful.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;times when you definitely should not nuke an install:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;if the install is tied to existing agents; losing those agent connections would be a mistake&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;those are really the only hard constraints i can think of. everything else seems pretty grey&lt;/p&gt;

&lt;h2 id=&quot;are-naming-schemes-important-enough-to-spend-time-on&quot;&gt;are naming schemes important enough to spend time on&lt;/h2&gt;
&lt;p&gt;hard yes. some of the names in use at my new place are frankly /hilarious/. and bad. “aaah, a scan template called ‘corp users’, what do you suppo - oh, its for scanning production? of course.”&lt;/p&gt;

&lt;p&gt;i picked a rough naming scheme template for all objects, and then tweaked it on a per-object-type basis, i.e.:&lt;/p&gt;

&lt;p&gt;ProductName - Environment - Geolocation - Data&lt;/p&gt;

&lt;p&gt;“search - prod - aus” is pretty straight forward, and then the ‘data’ field can be where you really express differences between the object classes. if it ends up looking a bit different between object classes, that’s ok. the most important thing for naming schemes is consistency to the rules you set. everything else, while still important, is secondary.&lt;/p&gt;

&lt;h2 id=&quot;a-note-on-scan-schedules&quot;&gt;a note on scan schedules&lt;/h2&gt;
&lt;p&gt;think about what a particular scan is trying to accomplish. if the goal of a scan is to get data from /corporate servers/ then a typical overnight maintenance window makes sense.&lt;/p&gt;

&lt;p&gt;if the goal is to get data from /the entire corporate netblock/ then scanning over night is probably really stupid, unless the entire company works during that time. after all, most companies are deploying large laptop fleets that all get taken home at the end of the day! instead, you can tackle this by doing one of these:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;scan midday, during the work hours, at several different times to catch differently shifted people&lt;/li&gt;
  &lt;li&gt;install agents on all laptop / movable devices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ok, apparently the title should be “two notes on sacns”. if your goal is to scan sensitive production servers make sure you reach out to the ops team that manages those servers. they should know, you should have a paper trail proving you at least made best efforts to communicate, etc.&lt;/p&gt;

&lt;h2 id=&quot;what-other-things-should-i-check-on&quot;&gt;what other things should I check on&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;is the OS backing the scanning app still getting updates? a lot of people fire and forget scan setups so make sure you’re not running shit off some idiots ubuntu 12 install.&lt;/li&gt;
  &lt;li&gt;how much of the infrastructure are we actually scanning? do have blind spots?
    &lt;ul&gt;
      &lt;li&gt;if there isn’t an ipam then this will be reaaaaal hard to figure out, but its very important.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;is your license sufficient or will you have to get more approved before you can actually achieve good coverage?&lt;/li&gt;
  &lt;li&gt;are there any non-expiring exceptions?
    &lt;ul&gt;
      &lt;li&gt;if so, i recommend nuking them and rebuilding them with at the most a 1 year expiration date; force the company to re-eval once a year if they really want these risks.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>jowj</name></author><summary type="html">no new problems i recently started a new job and am faced with the usual: “please set up our scanners and Make Us Secure”, “What Do These Alerts Mean”, etc etc. i keep thinking about the scanning / threat and vulnerability management (TVM) aspect, so i want to write about that. here are a list of questions that i’ve been asking myself, along with some possible answers.</summary></entry><entry><title type="html">pynit</title><link href="http://localhost:4000/projects/2019/06/23/pynit.html" rel="alternate" type="text/html" title="pynit" /><published>2019-06-23T00:00:00-05:00</published><updated>2019-06-23T00:00:00-05:00</updated><id>http://localhost:4000/projects/2019/06/23/pynit</id><content type="html" xml:base="http://localhost:4000/projects/2019/06/23/pynit.html">&lt;p&gt;pynit is a personal archival script that relies on &lt;code class=&quot;highlighter-rouge&quot;&gt;pinboard.in&lt;/code&gt;. it pulls in posts through the reddit api (by way of &lt;code class=&quot;highlighter-rouge&quot;&gt;praw&lt;/code&gt;) and adds them to the linked &lt;code class=&quot;highlighter-rouge&quot;&gt;pinboard&lt;/code&gt; account. you can get it &lt;a href=&quot;https://github.com/jowj/pynit&quot; title=&quot;pynit&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;i use reddit (foolish, i know) to keep up to date on a lot of bullshit in the world, although primarily:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fashion&lt;/li&gt;
  &lt;li&gt;emacs / org-mode&lt;/li&gt;
  &lt;li&gt;powershell&lt;/li&gt;
  &lt;li&gt;homelabs&lt;/li&gt;
  &lt;li&gt;secops&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;my typical workflow for seeing a piece of content that was useful looked something like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;view content
peruse comments (usually, the most useful part of the reddit entry)
find something that i want to revist
save it for later inside of reddit
forget about it forever, maybe revisit it within 3 months if i'm very bored
in the interim, many of the comments are deleted, links don't work, parent URL points to a dead webserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;this is obviously not ideal. pynit helps me with about half of those problems. specifically, because i pay for &lt;code class=&quot;highlighter-rouge&quot;&gt;pinboard&lt;/code&gt;’s archiving service, i can preserve the context in the comment section of the reddit entry. links may still be broken, but i’m perfectly fine with using archive.org for viewing the links later if i need to. as i mentioned, comments end up being the most useful thing to me most of the time.&lt;/p&gt;

&lt;p&gt;it should be noted that &lt;code class=&quot;highlighter-rouge&quot;&gt;pinboard&lt;/code&gt; can be used to archive the parent URL context as well, but i opted not to do that in order to preserve some semblance of readability in my &lt;code class=&quot;highlighter-rouge&quot;&gt;pinboard&lt;/code&gt; feed.&lt;/p&gt;

&lt;p&gt;comments are also possible to be preserved through things resavr, ceddit, removeddit, etc. these type of sites go down regularly and are not very reliable in my experience (although resavr looks promising, if limited. it only archives comments that are deleted that are &amp;gt; 1000 characters).&lt;/p&gt;

&lt;p&gt;now whenever i want to revisit a particular item i have all the comments preserved via pinboard, and URLs can be usable (most of the time) through archive.org.&lt;/p&gt;

&lt;p&gt;i learned a few things that i want to write up here, all related to python or working with rest apis:&lt;/p&gt;

&lt;h2 id=&quot;python&quot;&gt;python&lt;/h2&gt;

&lt;p&gt;i learned about &lt;a href=&quot;https://github.com/cool-RR/PySnooper&quot;&gt;pysnoop&lt;/a&gt; through &lt;a href=&quot;https://github.com/mrled/&quot;&gt;@mrled&lt;/a&gt; and it was SO useful. there may be more ways to use it (read their github page, its got great examples), but i primarily used it by decorating a function i wanted to inspect, like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import pysnooper

@pysnooper.snoop()
def my_function():
    var1 = 'thing1'
    var2 = 'thing2'

    return(var1 + var2)

print(my_function())

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;this would return:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;19:54:53.048881 call         4 def my_function():
19:54:53.049021 line         5     var1 = 'thing1'
New var:....... var1 = 'thing1'
19:54:53.049094 line         6     var2 = 'thing2'
New var:....... var2 = 'thing2'
19:54:53.049155 line         8     return(var1 + var2)
19:54:53.049197 return       8     return(var1 + var2)
Return value:.. 'thing1thing2'
thing1thing2

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;this allowed me to simple add a single line to an exist function /without modifying the function itself at all/ and make sure I was actually doing what I thought I was doing. this was huge for letting me sanity check my work.&lt;/p&gt;

&lt;h2 id=&quot;rest-apis&quot;&gt;rest apis&lt;/h2&gt;
&lt;p&gt;a lot of people (a lot of people!!) just have you use get requests instead of posts, even when you’re posting stuff. i am not a Web Man, so i don’t understand the why, but if all you’ve ever done is /read/ about working with rest apis then the real world may be confusing when you try and post something that requires a get request. &lt;a href=&quot;https://pinboard.in/api&quot;&gt;pinboard api docs&lt;/a&gt; for instance require get requests when you mean posts for backwards compatibility with the &lt;code class=&quot;highlighter-rouge&quot;&gt;delicious&lt;/code&gt; api.&lt;/p&gt;</content><author><name>jowj</name></author><summary type="html">pynit is a personal archival script that relies on pinboard.in. it pulls in posts through the reddit api (by way of praw) and adds them to the linked pinboard account. you can get it here</summary></entry><entry><title type="html">vcards</title><link href="http://localhost:4000/personal/2019/04/18/vcards.html" rel="alternate" type="text/html" title="vcards" /><published>2019-04-18T00:00:00-05:00</published><updated>2019-04-18T00:00:00-05:00</updated><id>http://localhost:4000/personal/2019/04/18/vcards</id><content type="html" xml:base="http://localhost:4000/personal/2019/04/18/vcards.html">&lt;p&gt;this past week my dad and I helped my grandmother with a few Computer Things. my grandfather died at the end of last year and the process of getting “Computer Things” to a usable state for my grandmother was pretty rough.&lt;/p&gt;

&lt;p&gt;One of the things that was unexpectedly frustrating was transferring stuff (photos, contacts, whatever) from my granddad’s account to my grandmothers. as near as i can tell, a different family member had been helping my grandmother and closed several of my grandfather’s old accounts. including email accounts and /iCloud/ accounts.&lt;/p&gt;

&lt;p&gt;normally, transferring contacts from one persons icloud to another’s is pretty straight forward (there’s an export button on icloud.com), but if you can’t succesfully auth to icloud it gets a lot trickier. there’s probably a few ways to do this, but the tack i ended up taking was:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;find a totally different source for the contacts (in this case, my grandfather’s outlook 2010 install)&lt;/li&gt;
  &lt;li&gt;export those contacts to vcards&lt;/li&gt;
  &lt;li&gt;import those vcards to icloud.com under the new account&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That is the bones of what happened, but the details kept screwing me over.&lt;/p&gt;

&lt;p&gt;first, outlook 2010 contact exports by default come out in an outlook specific format (.msg) that cannot be imported into icloud. ok well fine, surely there’s a straight forward way to deal with that.&lt;/p&gt;

&lt;p&gt;good news: you can directly export contacts from outlook to vcf
bad news: its fucking hidden behind a “send as business card” dialogue option that is fucking unintuitive. thanks 2010 microsoft.
worse news: it sends a very old .vcf format, 2.1. The minimum I could get working with icloud was 3.0&lt;/p&gt;

&lt;p&gt;ok well surely you can convert the 2.1 version to 3.0? in fact, what is even the difference? here is some wikipedia examples:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BEGIN:VCARD
VERSION:2.1
N:Gump;Forrest;;Mr.
FN:Forrest Gump
ORG:Bubba Gump Shrimp Co.
TITLE:Shrimp Man
PHOTO;GIF:http://www.example.com/dir_photos/my_photo.gif
TEL;WORK;VOICE:(111) 555-1212
TEL;HOME;VOICE:(404) 555-1212
ADR;WORK;PREF:;;100 Waters Edge;Baytown;LA;30314;United States of America
LABEL;WORK;PREF;ENCODING=QUOTED-PRINTABLE;CHARSET=UTF-8:100 Waters Edge=0D=
 =0ABaytown\, LA 30314=0D=0AUnited States of America
ADR;HOME:;;42 Plantation St.;Baytown;LA;30314;United States of America
LABEL;HOME;ENCODING=QUOTED-PRINTABLE;CHARSET=UTF-8:42 Plantation St.=0D=0A=
 Baytown, LA 30314=0D=0AUnited States of America
EMAIL:forrestgump@example.com
REV:20080424T195243Z
END:VCARD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BEGIN:VCARD
VERSION:3.0
N:Gump;Forrest;;Mr.;
FN:Forrest Gump
ORG:Bubba Gump Shrimp Co.
TITLE:Shrimp Man
PHOTO;VALUE=URI;TYPE=GIF:http://www.example.com/dir_photos/my_photo.gif
TEL;TYPE=WORK,VOICE:(111) 555-1212
TEL;TYPE=HOME,VOICE:(404) 555-1212
ADR;TYPE=WORK,PREF:;;100 Waters Edge;Baytown;LA;30314;United States of America
LABEL;TYPE=WORK,PREF:100 Waters Edge\nBaytown\, LA 30314\nUnited States of America
ADR;TYPE=HOME:;;42 Plantation St.;Baytown;LA;30314;United States of America
LABEL;TYPE=HOME:42 Plantation St.\nBaytown\, LA 30314\nUnited States of America
EMAIL:forrestgump@example.com
REV:2008-04-24T19:52:43Z
END:VCARD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;the thing that caused most of the issues for the contact set I was working on was the ~TEL;~ lines. the type declarations, when present, needed to be altered. to fix this is pretty simple:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat /path/to/dir/* &amp;gt; all-outlook-contacts.vcf
sed -e 's/TEL;/TEL;TYPE=/g' -e 's/VERSION:2.1/VERSION:3.0/g' ../new-contacts/all-outlook-contacts.vcf &amp;gt; ../new-contacts/all-CLEANED.vcf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;yes thats right, ‘ i am very 3 now ‘ is most of the work lmao. this worked, but I still couldn’t import the vcf files to icloud - it would think for a while, then error saying that at least one of the entries was unreadable. i skimmed through the file visually and found some lines that were interesting - on a few cards there was a LANGUAGE declaration:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat ../new-contacts/all-outlook-contacts.vcf | grep =en
&amp;gt;N;LANGUAGE=en-us:last first
&amp;gt;N;LANGUAGE=en-us:last first
&amp;gt;N;LANGUAGE=en-us:last first
&amp;gt;N;LANGUAGE=en-us:last first
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;wtf is that, that isn’t mentioned in the spec until vcards 4.0&lt;/p&gt;

&lt;p&gt;my best guess is that this is just some Fancy Colour from outlook specifically, because nobody else was talking about this based on quick google searches. I just removed it from these 4 cards and went on to import them to icloud succesfully.&lt;/p&gt;

&lt;p&gt;the lesson i learned during this process is:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;don’t close people’s accounts right away; make sure everything is prepared before accounts are closed.&lt;/li&gt;
  &lt;li&gt;by the time i die i should establish a fucking runbook to go over the necessary steps for people who aren’t technically inclined&lt;/li&gt;
  &lt;li&gt;open formats are great&lt;/li&gt;
&lt;/ul&gt;</content><author><name>jowj</name></author><summary type="html">this past week my dad and I helped my grandmother with a few Computer Things. my grandfather died at the end of last year and the process of getting “Computer Things” to a usable state for my grandmother was pretty rough.</summary></entry><entry><title type="html">agares</title><link href="http://localhost:4000/projects/2019/04/15/agares.html" rel="alternate" type="text/html" title="agares" /><published>2019-04-15T00:00:00-05:00</published><updated>2019-04-15T00:00:00-05:00</updated><id>http://localhost:4000/projects/2019/04/15/agares</id><content type="html" xml:base="http://localhost:4000/projects/2019/04/15/agares.html">&lt;h1 id=&quot;agares-a-multi-armed-demon&quot;&gt;agares, a multi armed demon&lt;/h1&gt;
&lt;p&gt;well, originally i don’t think the multi armed part was mentioned in the “list of demons” i found on the internet. now, though, agares is absolutely multi armed because I keep adding so much bullshit to this project.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sync my dot files. .emacs, bash, powershell, etc.&lt;/li&gt;
  &lt;li&gt;configure windows devices. install software, some minor software configuration, remove windows bullshit.&lt;/li&gt;
  &lt;li&gt;sync my keyboard config; this involves updating a .png as well as a folder of .json an .kll files to apply firmware to ergodox.&lt;/li&gt;
  &lt;li&gt;house deployments for home projects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Up next is configuring an Mac device, and then whatever else I get to throw at it.&lt;/p&gt;

&lt;h2 id=&quot;dot-file-sync&quot;&gt;dot file sync&lt;/h2&gt;
&lt;p&gt;I think I’m doing this poorly. So far all i’m really doing is configuring all devices &lt;em&gt;actual&lt;/em&gt; dot files to load these &lt;code class=&quot;highlighter-rouge&quot;&gt;agares/&lt;/code&gt; dotfiles.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;powershell: make sure you don’t have powershell, vscode /ise, and pwsh.exe all looking for the same profile. you’ll hate yourself. split them up.&lt;/li&gt;
  &lt;li&gt;.emacs: this is pretty straightforward unless you use more emacs features than me (easy to do). I leave in just a single .emacs file.&lt;/li&gt;
  &lt;li&gt;.bashrc: there’s a complicated set of rules that determines, at least on mac, when different .bash* files get loaded. be careful that yours only loads when you want it&lt;/li&gt;
  &lt;li&gt;.tmux: straight forward.&lt;/li&gt;
  &lt;li&gt;conemu: i don’t have an elegant solve for this. I just import this file whenever I set up a new machine. there is likely a better way.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;further-bashrc-info&quot;&gt;further .bashrc info&lt;/h3&gt;
&lt;p&gt;I found &lt;a href=&quot;http://hayne.net/MacDev/Notes/unixFAQ.html#shellStartup&quot;&gt;this&lt;/a&gt; link very useful, quoted below:&lt;br /&gt;
When a “login shell” starts up, it reads the file “/etc/profile” and then “~/.bash_profile” or “~/.bash_login” or “~/.profile” (whichever one exists - it only reads one of these, checking for them in the order mentioned).&lt;/p&gt;

&lt;p&gt;When a “non-login shell” starts up, it reads the file “/etc/bashrc” and then the file “~/.bashrc”.&lt;/p&gt;

&lt;p&gt;Note that when bash is invoked with the name “sh”, it tries to mimic the startup sequence of the Bourne shell (“sh”). In particular, a non-login shell invoked as “sh” does not read any dot files by default. See the bash man page for details.&lt;/p&gt;

&lt;p&gt;What this means is that you don’t want to link or load the agares .bashrc file from .bashrc &lt;em&gt;necessarily&lt;/em&gt;. It depends on your usage. you’ll likely wanna call it from .bash_profile instead, if you’re on a mac.&lt;/p&gt;

&lt;h2 id=&quot;configure-windows-devices&quot;&gt;configure windows devices&lt;/h2&gt;
&lt;p&gt;3rd party app install is all handled through chocolatey. this is a great / terrible tool for this. great because it actually exists (wonderful!). Terrible because of certain usability problems. some packages install very weirdly through. emacs, for instance; do you want emacs? or emacs64? Those are not just optimized for different cpus, but are actually different versions of emacs (24 vs 25) that have different features shipped natively.&lt;/p&gt;

&lt;h3 id=&quot;removing-windows-kruft&quot;&gt;removing windows kruft&lt;/h3&gt;
&lt;p&gt;windows, particularly windows10, now ships with a bunch of bullshit that no sane person wants on their fucking computer. fucking 3rd party games are my favorite. thanks msft, get the fuck out. I stole a bunch of functions from &lt;a href=&quot;https://gist.github.com/alirobe/7f3b34ad89a159e6daa1&quot;&gt;this&lt;/a&gt; gist (which stole them from another). I definitely recommend perusing powershell module file i made before running the functions therein. Some are easy wins, or simple “get started” features, like removing a game or unpinning stuff from the start menu. Some are more hit or miss, like disabling the windows store; great 90% of the time IME, but if you didn’t have WSL you &lt;em&gt;must&lt;/em&gt; have the windows store or you can’t install it.&lt;/p&gt;

&lt;h3 id=&quot;a-note-on-hypervisors&quot;&gt;a note on hypervisors&lt;/h3&gt;
&lt;p&gt;i do a lot of work on hyper-v, especially recently, because there’s a great suite of automation tools that work natively on that platform. hyperv is a fine tool for many things, particularly home labbing, but far less useful as a “need to run second OS without dual boot” utility. If you need that you’ll likely need something like vmware workstation or virtualbox. the bad news is &lt;em&gt;you cannot have hyperv and another hypervisor active on the same machine at the same time&lt;/em&gt;. hyperv blocks other hypervisors from working because its petty and rude (something about the way it operates does this. for more information on this check out &lt;a href=&quot;https://superuser.com/questions/1208850/why-vitualbox-or-vmware-can-not-run-with-hyper-v-enabled-windows-10&quot;&gt;this superuser answer&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;keyboard-firmware-sync&quot;&gt;keyboard firmware sync&lt;/h2&gt;
&lt;p&gt;i use an &lt;a href=&quot;https://www.massdrop.com/buy/infinity-ergodox&quot;&gt;infinity ergodox&lt;/a&gt; at home. this is a fun entry level diy project that taught me to solder (badly) and introduced me to QMK and TMK. I avoid having to dive very deep into those and instead use input.club’s online &lt;a href=&quot;https://input.club/configurator-ergodox/&quot;&gt;configurator tool&lt;/a&gt;. i download the output and put them into the keyboard dir of &lt;code class=&quot;highlighter-rouge&quot;&gt;agares&lt;/code&gt;, along with a screenshot of the configurator tool, so that I know how everything is &lt;em&gt;currently&lt;/em&gt; configured. this helps especially early on when you’re tweaking the keymap every few days trying to remember “where the fuck did i put the _ sign??”.&lt;/p&gt;

&lt;p&gt;Once that’s downloaded you still have to flash your ergodox. do yourself a favor and keep a “flash” keybinding easily accessible on both sides of your keyboard or you will hate yourself.&lt;/p&gt;

&lt;p&gt;Some guides say you only need to flash one side of the keyboard as long as they are plugged into each other. That has never worked for me and I &lt;em&gt;must&lt;/em&gt; flash both sides or the keymap will be incorrect.&lt;/p&gt;

&lt;h3 id=&quot;flashing-the-keyboard-on-windows&quot;&gt;flashing the keyboard on windows&lt;/h3&gt;
&lt;p&gt;i absolutely can not get this to work unless i’m running a linux guest in virtualbox. instead, I flash from a mac or other *nix computer because its just hilariously easy and I don’t have to fuck with loading a new driver first. sorry for this terrible answer, but for the infinity ergodox this is literally the easiest way. if anyone knows one for the love of god please &lt;a href=&quot;mailto:me@jowj.net&quot;&gt;email me&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;flashing-the-keyboard-on-nix&quot;&gt;flashing the keyboard on *nix&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/MechanicalKeyboards/comments/5bjtt8/guide_infinity_ergodox_linux_guide_modifying/&quot;&gt;read this here poast&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;deployments-for-home-projects&quot;&gt;deployments for home projects&lt;/h2&gt;
&lt;p&gt;right now this is really just a spot for my deployment of &lt;code class=&quot;highlighter-rouge&quot;&gt;mojojojo-bot&lt;/code&gt;, my slackbot. you can read more about it (in an out of date blog post) &lt;a href=&quot;/blogposts/mojojojo-bot.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I deploy it using ansible targeting one of my few docker hosts. right now those are all local. eventually, i hope to build out a spot, or a deployment mechanism, for pushing it to Azure or AWS. I call &lt;code class=&quot;highlighter-rouge&quot;&gt;mojo.yml&lt;/code&gt; with ansible-playbook, referencing a custom inventory file of &lt;code class=&quot;highlighter-rouge&quot;&gt;hosts.yml&lt;/code&gt;, with &lt;code class=&quot;highlighter-rouge&quot;&gt;--ask-vault-pass&lt;/code&gt; to prompt for password to decrypt &lt;code class=&quot;highlighter-rouge&quot;&gt;mojo-vault-vars.yml&lt;/code&gt;, containing the slack-bot API token. this allows me to sync the actual API token via github, encrypted, without worrying about everyone and their dog fucking with my slack server.&lt;/p&gt;</content><author><name>jowj</name></author><summary type="html">agares, a multi armed demon well, originally i don’t think the multi armed part was mentioned in the “list of demons” i found on the internet. now, though, agares is absolutely multi armed because I keep adding so much bullshit to this project.</summary></entry><entry><title type="html">friendsgiving</title><link href="http://localhost:4000/personal/2019/04/15/friendsgiving.html" rel="alternate" type="text/html" title="friendsgiving" /><published>2019-04-15T00:00:00-05:00</published><updated>2019-04-15T00:00:00-05:00</updated><id>http://localhost:4000/personal/2019/04/15/friendsgiving</id><content type="html" xml:base="http://localhost:4000/personal/2019/04/15/friendsgiving.html">&lt;p&gt;&lt;img src=&quot;/photos/friendsgiving/friendsgiving-header.jpeg&quot; alt=&quot;the best table &quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;look-at-how-pretty-this-fucking-table-is&quot;&gt;look at how pretty this fucking table is&lt;/h1&gt;
&lt;p&gt;my sister made a bunch of that stuff there; the candles were all melted on to the wood and the gourds that they were resting on; the wreathes of Whatever Plant were picked from her garden; even the table it all sat on was made by my sister and her family&lt;/p&gt;

&lt;p&gt;it’s lovely and makes me feel fucking warm to have been there.&lt;/p&gt;

&lt;h1 id=&quot;heres-some-photos&quot;&gt;here’s some photos&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/photos/friendsgiving/avery.jpeg&quot; alt=&quot;avery&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/photos/friendsgiving/micah.jpeg&quot; alt=&quot;micah&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/photos/friendsgiving/eli-and-jillian.jpeg&quot; alt=&quot;eli-and-jillian&quot; /&gt;&lt;/p&gt;</content><author><name>jowj</name></author><summary type="html">look at how pretty this fucking table is my sister made a bunch of that stuff there; the candles were all melted on to the wood and the gourds that they were resting on; the wreathes of Whatever Plant were picked from her garden; even the table it all sat on was made by my sister and her family</summary></entry></feed>